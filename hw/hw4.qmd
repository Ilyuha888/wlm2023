# HW4 // Предобработка данных {#hw4 .unnumbered}

```{=html}
<!--
REPLACE ALL hw4 TO hw<n> WITH MATCH CASE
-->
```

```{r opts, echo=FALSE, eval=TRUE}
knitr::opts_chunk$set(echo = FALSE, eval = FALSE)
```

::: {.callout-note}

## Пакет с пакетами

Для выполнения заданий этой домашки используйте `tidyverse`.

:::

## Основные задания {#hw4_main}

::: {.callout-note}

### Описание данных

Сегодня мы работаем с данными одного экспериментального исследования.

Эксперимент был направлен на изучение гибридного зрительного поиска. Испытуемому было необходимо искать объекты из определенной категории. В качестве независимых переменных варьировались так называемые *visual setsize* и *memory setsize*, то есть количество стимулов, предъявляемых на экране монитора, и количество категорий, которые нужно было запомнить. Кроме того, использовались категории двух уровней --- базовые (яблоки, кружки) и суперординатные (фрукты, посуда).

Данные располагаются в двух файлах. В файле `base.xlsx` содержаться данные из группы испутыемых, которым предлагались базовые категории, в файле `super.xlsx` --- данные из группы испутыемых, которым предлагались суперординатные категории.

На листе `cor_answ` в каждом файле есть данные по точности для каждого сочетания условий. Сочетания условий кодируются следующим образом: например, `1_stim_8` обозначает, что *memory setsize* был равен 1, а *visual setsize* был равен 8. То есть первое число задаёт *memory setsize*, второе --- *visual setsize*. На этом же листе с правого края есть соцдем респондентов --- пол и возраст. На листе `Time` располагаются аналогичным образом организованные данные по времени реакции (от момента начала предъявления стимулов до нажатия на клавишу).

Хотя данные, с которыми мы работаем, были частично предобработаны коллегой --- это не сырые аутпуты PsychoPy --- нам все равно придется с ними поработать, чтобы привести их к удобному для работы виду.

:::


### #1 {#hw4-1-title}

<img id="hw4-1-level" class="level"/>

::: {#hw4-1-task .task}

Скачайте [архив с данными](https://drive.google.com/uc?export=download&id=1KH8bI3CHaZbRf3VfUMPJ4-81qeZewR92). Разархивируйте файлы в проект курса. Импортируйте данные в R. У вас должно получиться 4 датасета с данными с 4-х листов Excel-файлов. Назовите их `base_time`, `base_acc`, `super_time` и `suoer_acc` для времени реакции и точности и условиях с базовыми и суперординатными категориями соответственно.

Возникли ли какие-то странности?

:::

```{r hw4-1}
library(tidyverse)

base_time <- readxl::read_xlsx("../data/hw4/base.xlsx", "Time", skip = 1)
base_acc <- readxl::read_xlsx("../data/hw4/base.xlsx", "cor_answ", skip = 1)
super_time <- readxl::read_xlsx("../data/hw4/super.xlsx", "Time", skip = 1)
super_acc <- readxl::read_xlsx("../data/hw4/super.xlsx", "cor_answ", skip = 1)
```

::: {#hw4-1-autocheck .autocheck}
::: {#hw4-1-ir .input-requirements}
В качестве ответа введите число строк, которые необходимо пропустить при импорте данных, чтобы они прочитались корректно.
:::

<input class="autocheck-input" type="text" id="hw4-1" placeholder="Введите ответ…">

<input class="autocheck-button" type="button" value="Проверить" onclick="check('hw4-1')">

::: {#hw4-1-fb .autocheck-feedback}
:::
:::

::: hints-wrapper

<details class="hints" id="hw4-1-hints">

<summary>Подсказки</summary>

<details class="hint">

<summary>Как делать задание?</summary>

* Необходимо скачать архив с данными и разархивировать его в проект курса.
* Далее нужно загрузить четыре датасета в четыре разных объекта, прочитав данные из Excel-файлов.
* После загрузки проверьте, корректно ли загрузились данные. При необходимости воспользуйтесь документацией в функций чтения данных.

</details>

<details class="hint">

<summary>Что надо сделать?</summary>

* Скачайте архив с данными и разархивируйте его в проект курса.
* Загрузите датасеты из Excel-файлов с помощью функции `read_xlsx()` из пакета `readxl`.
* Обратите внимание, как прочитались заголовки колонок. Откройте справку по функции `read_xlsx()` --- `?read_xlsx` --- и ознакомьтесь в работой аргeмента `skip`.
* Скорректируйте код загрузки данных.

</details>

</details>

:::

### #2 {#hw4-2-title}

<img id="hw4-2-level" class="level"/>

::: {#hw4-2-task .task}

Проверьте, совпадает ли количество строк в получившихся датасетах.

:::

```{r hw4-2}
nrow(base_acc); nrow(base_time); nrow(super_acc); nrow(super_time)
```

::: {#hw4-2-autocheck .autocheck}
::: {#hw4-2-ir .input-requirements}
Для самопроверки введите число строк, если оно совпадает во всех датасетах, и `нет`, если оно отличается хотя бы в одном.
:::

<input class="autocheck-input" type="text" id="hw4-2" placeholder="Введите ответ…">

<input class="autocheck-button" type="button" value="Проверить" onclick="check('hw4-2')">

::: {#hw4-2-fb .autocheck-feedback}
:::
:::

::: {.hints-wrapper hidden="true"}
<details class="hints" id="hw4-2-hints">

<summary>Подсказки</summary>

<details class="hint">

<summary>Как делать задание?</summary>

</details>

<details class="hint">

<summary>Что надо сделать?</summary>

</details>

<details class="hint">

<summary>Ответ неверный</summary>

</details>

</details>
:::

### #3 {#hw4-3-title}

<img id="hw4-3-level" class="level"/>

::: {#hw4-3-task .task}

Выгрузите соцдем, содержащийся в данных, в отдельный датасет. Соедините обе его части в один объект.

:::

```{r hw4-3}
base_acc %>% 
  select(...20, ...21) %>% 
  bind_rows(
    super_acc %>% 
      select(...20, ...21)
  ) -> socdem
sapply(socdem, function(x) sum(is.na(x)))
```

::: {#hw4-3-autocheck .autocheck}
::: {#hw4-3-ir .input-requirements}
В качестве ответа введите число пропущенных значений в получившемся датасете. Если их нет, введите 0.
:::

<input class="autocheck-input" type="text" id="hw4-3" placeholder="Введите ответ…">

<input class="autocheck-button" type="button" value="Проверить" onclick="check('hw4-3')">

::: {#hw4-3-fb .autocheck-feedback}
:::
:::

::: hints-wrapper
<details class="hints" id="hw4-3-hints">

<summary>Подсказки</summary>

<details class="hint">

<summary>Как делать задание?</summary>

* Определите, в каких датасетах и колонках содержится соцдем в представленных данных.
* Отберите необходимые колонки из данных.
* Если соцдем находится в нескольких датасетах, объедините все имеющиеся части в один объект.

</details>

<details class="hint">

<summary>Что надо сделать?</summary>

* Посмотрите в описании, как организованы данные и в какую их часть записан соцдем.
* Извлеките необходимые колонки с помощью `select()`.
* При необходимости объедините части соцдема в один объект с помощью `bind_rows()`.

</details>

</details>
:::

### #4 {#hw4-4-title}

<img id="hw4-4-level" class="level"/>

::: {#hw4-4-task .task}
Удалите пропущенные значения из данных соцдема, если они есть, и задайте имена колонок --- `sex` и `age` соответственно.
:::

```{r hw4-4}
socdem %>% 
  drop_na() %>% 
  set_names("sex", "age") -> socdem
nrow(socdem)
```

::: {#hw4-4-autocheck .autocheck}
::: {#hw4-4-ir .input-requirements}
Для самопроверки введите общее количество испытуемых в выборке эксперимента.
:::

<input class="autocheck-input" type="text" id="hw4-4" placeholder="Введите ответ…">

<input class="autocheck-button" type="button" value="Проверить" onclick="check('hw4-4')">

::: {#hw4-4-fb .autocheck-feedback}
:::
:::

::: {.hints-wrapper hidden="true"}
<details class="hints" id="hw4-4-hints">

<summary>Подсказки</summary>

<details class="hint">

<summary>Как делать задание?</summary>

</details>

<details class="hint">

<summary>Что надо сделать?</summary>

</details>

<details class="hint">

<summary>Ответ неверный</summary>

</details>

</details>
:::

### #5 {#hw4-5-title}

<img id="hw4-5-level" class="level"/>

::: {#hw4-5-task .task}
Удалите из данных эксперимента лишние строки и столбцы. В объектах должно остаться только то, что относится к экспериментальным данным. Лишними считайте те столбцы, которые не имеют названия, и те строки, в которых не указан идентификатор респондента. Перезапишите имеющиеся объекты.
:::

```{r hw4-5}
slice_select <- function(x) x %>% select(1:17) %>% slice(1:24)

base_acc %>% slice_select() -> base_acc
base_time %>% slice_select() -> base_time
super_acc %>% slice_select() -> super_acc
super_time %>% slice_select() -> super_time
```

::: {#hw4-5-autocheck .autocheck}
::: {#hw4-5-ir .input-requirements}

:::

<input class="autocheck-input" type="text" id="hw4-5" placeholder="Введите ответ…">

<input class="autocheck-button" type="button" value="Проверить" onclick="check('hw4-5')">

::: {#hw4-5-fb .autocheck-feedback}
:::
:::

::: hints-wrapper
<details class="hints" id="hw4-5-hints">

<summary>Подсказки</summary>

<details class="hint">

<summary>Как делать задание?</summary>

* Изучите структуру датасетов с экспериментальными данными. Найдите в ней общие паттерны.
* В данном случае из-за сходной структуры данных уместно написать короткую функцию, которая будет отбирать из датасетов только те строки и столбцы, в которых содержатся экспериментальные данные.
* Примените функцию на имеющихся датасетах и перезапишите имеющиеся объекты, сохранив в них только экспериментальные данные.

</details>

<details class="hint">

<summary>Что надо сделать?</summary>

* Изучите структуру датасетов с экспериментальными данными и определите номера колонок и строк, которые нобходимо отобрать.
* Напишите функцию, которая будет принимать на вход датасет и отбирать из него необходимые колонки и строки --- подойдут `select()` и `slice()`.
* Примените функцию на имеющихся датасетах и перезапишите имеющиеся объекты, сохранив в них только экспериментальные данные.

</details>

</details>
:::

### #6 {#hw4-6-title}

<img id="hw4-6-level" class="level"/>

::: {#hw4-6-task .task}

Создайте в датасетах эксперимента новую переменную `group`, содержащую информацию об уровне категории --- базовая (`base`) или суперординатная (`super`).

:::

```{r hw4-6}
base_acc %>% mutate(group = "base") -> base_acc
base_time %>% mutate(group = "base") -> base_time
super_acc %>% mutate(group = "super") -> super_acc
super_time %>% mutate(group = "super") -> super_time
```

::: {#hw4-6-autocheck .autocheck}
::: {#hw4-6-ir .input-requirements}
Описание формата инпута.
:::

<input class="autocheck-input" type="text" id="hw4-6" placeholder="Введите ответ…">

<input class="autocheck-button" type="button" value="Проверить" onclick="check('hw4-6')">

::: {#hw4-6-fb .autocheck-feedback}
:::
:::

::: {.hints-wrapper hidden="true"}
<details class="hints" id="hw4-6-hints">

<summary>Подсказки</summary>

<details class="hint">

<summary>Как делать задание?</summary>

</details>

<details class="hint">

<summary>Что надо сделать?</summary>

</details>

<details class="hint">

<summary>Ответ неверный</summary>

</details>

</details>
:::

### #7 {#hw4-7-title}

<img id="hw4-7-level" class="level"/>

::: {#hw4-7-task .task}

Соедините датасеты с данными о точности и времени реакции друг с другом --- `base_acc` с `super_acc` и `base_time` с `super_time`. Назовите новые датасеты `acc` и `time` соответственно.

:::

```{r hw4-7}
base_acc %>% 
  bind_rows(super_acc) -> acc
base_time %>% 
  bind_rows(super_time) -> time
```

::: {#hw4-7-autocheck .autocheck}
::: {#hw4-7-ir .input-requirements}
Описание формата инпута.
:::

<input class="autocheck-input" type="text" id="hw4-7" placeholder="Введите ответ…">

<input class="autocheck-button" type="button" value="Проверить" onclick="check('hw4-7')">

::: {#hw4-7-fb .autocheck-feedback}
:::
:::

::: hints-wrapper
<details class="hints" id="hw4-7-hints">

<summary>Подсказка</summary>

Исходя из структуры имеющихся данных, выберите подходящий способ объединения датасетов и необходимую для этого функцию. В обоих случаях датасеты объдиняются одинаково.

</details>
:::

### #8 {#hw4-8-title}

<img id="hw4-8-level" class="level"/>

::: {#hw4-8-task .task}

Сейчас получившиеся датасеты пребывают в широком формате. Переведите их в длинный формат и разделите колонку с сочетанием экспериментальных условий на две.

В датасете должны содержаться следующие колонки:

* `id` --- идентификатор испытуемого
* `visual_setsize` --- количество стимулов в пробе 
* `memory_setsize` --- количество категорий для запоминания
* `reaction_time/accuracy` --- время реакции / точность (в зависимости от датасета)

При необходимости переименуйте столбцы.

:::

```{r hw4-8}
acc %>% 
  pivot_longer(-c("№_resp", "group"),
               values_to = "accuracy") %>% 
  separate(name, into = c("memory_setsize", "visual_setsize"), sep = "_stim_") %>% 
  rename(id = `№_resp`) -> acc
time %>% 
  pivot_longer(-c("№_resp", "group"),
               values_to = "reaction_time") %>% 
  separate(name, into = c("memory_setsize", "visual_setsize"), sep = "_stim_") %>% 
  rename(id = `№_resp`) -> time
```

::: {#hw4-8-autocheck .autocheck}
::: {#hw4-8-ir .input-requirements}
Описание формата инпута.
:::

<input class="autocheck-input" type="text" id="hw4-8" placeholder="Введите ответ…">

<input class="autocheck-button" type="button" value="Проверить" onclick="check('hw4-8')">

::: {#hw4-8-fb .autocheck-feedback}
:::
:::

::: hints-wrapper
<details class="hints" id="hw4-8-hints">

<summary>Подсказки</summary>

* Для корректного приведения к длинному формату, определите колонки, которые не должны участвовать в преобразовании.
* Разделяя колонку с сочетанием экспериментальных условий, задайте разделитель, наиболее подходящий для значений, которые в ней содержатся.

</details>
:::

### #9 {#hw4-9-title}

<img id="hw4-9-level" class="level"/>

::: {#hw4-9-task .task}
Объедините все данные в один датасет, который будет содержать следующие колонки:

* `id` --- идентификатор испытуемого
* `group` --- уровень категории
* `visual_setsize` --- количество стимулов в пробе 
* `memory_setsize` --- количество категорий для запоминания
* `reaction_time` --- время реакции
* `accuracy` --- точность

Сохраните результат в переменную `hybrid`.

:::

```{r hw4-9}
acc %>% 
  full_join(time, join_by(id, memory_setsize, visual_setsize, group)) -> hybrid
```

::: {#hw4-9-autocheck .autocheck}
::: {#hw4-9-ir .input-requirements}
Описание формата инпута.
:::

<input class="autocheck-input" type="text" id="hw4-9" placeholder="Введите ответ…">

<input class="autocheck-button" type="button" value="Проверить" onclick="check('hw4-9')">

::: {#hw4-9-fb .autocheck-feedback}
:::
:::

::: hints-wrapper
<details class="hints" id="hw4-9-hints">

<summary>Подсказка</summary>

Исходя из структуры имеющихся данных, выберите подходящий способ объединения датасетов и необходимую для этого функцию.

</details>
:::

### #10 {#hw4-10-title}

<img id="hw4-10-level" class="level"/>

::: {#hw4-10-task .task}

На получившемся датасете рассчитайте среднее, минимальное и максимальное время реакции, а также его стандартное отклонение, по всем сочетаниям независимых переменных.

:::

```{r hw4-10}
hybrid %>% 
  group_by(group, visual_setsize, memory_setsize) %>% 
  summarise(rt_mean = mean(reaction_time),
            rt_min = min(reaction_time),
            rt_max = max(reaction_time),
            rt_sd = sd(reaction_time))
```

::: {#hw4-10-autocheck .autocheck}
::: {#hw4-10-ir .input-requirements}
Для самопроверки в поле ниже введите среднее время реакции в группе `base` при `visual_setsize` 12 и `memory_sesize` 4, округленное до третьего знака после запятой.
:::

<input class="autocheck-input" type="text" id="hw4-10" placeholder="Введите ответ…">

<input class="autocheck-button" type="button" value="Проверить" onclick="check('hw4-10')">

::: {#hw4-10-fb .autocheck-feedback}
:::
:::

::: {.hints-wrapper hidden="true"}
<details class="hints" id="hw4-10-hints">

<summary>Подсказки</summary>

<details class="hint">

<summary>Как делать задание?</summary>

</details>

<details class="hint">

<summary>Что надо сделать?</summary>

</details>

<details class="hint">

<summary>Ответ неверный</summary>

</details>

</details>
:::

## Дополнительные задания {#hw4_add}

### #1 {#hw4-11-title}

<img id="hw4-11-level" class="level"/>

::: {#hw4-11-task .task}

В нашем случае названия файлов данных, которые у нас есть, содержат названия экспериментальных условий (`base.xlsx` и `super.xlsx`). Нам повезло, что эти название короткие, простые и их всего два --- мы можем задать их вручную. Однако так случается не всегда, и хорошо автоматизировать этот процесс, чтобы не допустить лишних опечаток.

Напишите код, с помощью которого можно вытащить вектор с экспериментальными условиями из названий файлов.

:::

```{r hw4-11}
dir("../data/hw4/") %>% 
  str_remove_all(".xlsx")
```

::: {#hw4-11-autocheck .autocheck}
::: {#hw4-11-ir .input-requirements}
Описание формата инпута.
:::

<input class="autocheck-input" type="text" id="hw4-11" placeholder="Введите ответ…">

<input class="autocheck-button" type="button" value="Проверить" onclick="check('hw4-11')">

::: {#hw4-11-fb .autocheck-feedback}
:::
:::

::: hints-wrapper
<details class="hints" id="hw4-11-hints">

<summary>Подсказки</summary>

<details class="hint">

<summary>Как делать задание?</summary>

</details>

<details class="hint">

<summary>Что надо сделать?</summary>

</details>

<details class="hint">

<summary>Ответ неверный</summary>

</details>

</details>
:::

### #2 {#hw4-12-title}

<img id="hw4-12-level" class="level"/>

::: {#hw4-12-task .task}

В ходе выполнения заданий вы могли заметить, что часто мы выполняли одни и те же преобразования с разными датасетами. Так как входные датасеты имеют схожую структуру, можно оптимизировать усилия.

Напишите функцию, которая будет:

* принимать на вход путь к файлу, в котором лежат данные
    * а также другие необходимые для предобработки аргументы
* предобрабатывать их
* и возвращать датасет вида, который вы получили в [задании 9](#hw4-9-title) (`hybrid`).

Тело функции соберите из кода, который вы написали в ходе выполнения задания основной части.

:::

```{r hw4-12}
path <- "../data/hw4/"

preproc <- function(file, sheet, path_to_folder) {
  readxl::read_xlsx(paste0(path_to_folder, file), 
                    skip = 1, 
                    sheet = sheet) %>%
    select(1:17) %>%
    slice(1:24) %>%
    rename("id" = "№_resp") %>%
    pivot_longer(-id,
                 names_to = "cond",
                 values_to = sheet) %>%
    separate(cond,
             into = c("memory_setsize", "visual_setsize"),
             sep = "_stim_") %>%
    mutate(group = file %>%
             str_remove_all(".xlsx")) %>%
    return()
}

preproc("super.xlsx", "Time", path) %>% 
  bind_rows(
    preproc("base.xlsx", "Time", path)
  ) %>% 
  full_join(preproc("super.xlsx", "cor_answ", path) %>% 
              bind_rows(
                preproc("base.xlsx", "cor_answ", path)
              ), 
            join_by(id, 
                    memory_setsize, 
                    visual_setsize, 
                    group)) %>% 
  rename("reaction_time" = "Time",
         "accuracy" = "cor_answ")
```

::: {#hw4-12-autocheck .autocheck}
::: {#hw4-12-ir .input-requirements}
Описание формата инпута.
:::

<input class="autocheck-input" type="text" id="hw4-12" placeholder="Введите ответ…">

<input class="autocheck-button" type="button" value="Проверить" onclick="check('hw4-12')">

::: {#hw4-12-fb .autocheck-feedback}
:::
:::

::: hints-wrapper
<details class="hints" id="hw4-12-hints">

<summary>Подсказки</summary>

<details class="hint">

<summary>Как делать задание?</summary>

</details>

<details class="hint">

<summary>Что надо сделать?</summary>

</details>

<details class="hint">

<summary>Ответ неверный</summary>

</details>

</details>
:::

::: {.callout-note}

### Генерируем координаты {#hw4-grid-coord}

Следующие три задания посвящены написанию кода для генерации координатной сетки для стимулов в зрительном поиске.

Общий вид координатной сетки выглядит так:

<center>
<figure>
<img src="pics/vs-grid.jpg" width="100%">
<figcaption>Общая схема координатной сетки. Разрешение экрана --- 1920×1080 пикселей. Координаты центра экрана --- [0, 0]. Отступ от края экрана 100 пикселей с каждой стороны.</figcaption>
</figure>
</center>

В данном случае мы будем генерировать сетку для 21 стимула --- в 3 ряда по 7 в каждом. На пересечении черных линий располагаются центры стимулов.

<center>
<figure>
<img src="pics/vs-grid-2.jpg" width="100%">
<figcaption>Общая схема координатной сетки с расположением центров стимулов.</figcaption>
</figure>
</center>

Поскольку стимулы не могут отображаться на одном и том же месте в каждой пробе, задается область, в которой стимул может свободно колебаться от пробы к пробе. Однако чтобы они на сталкивались друг с другом, предусматривается зазор между областями их свободного колебания.

<center>
<figure>
<img src="pics/vs-grid-3.jpg" width="100%">
<figcaption>Общая схема координатной сетки с расположением центром стимулов. Синим обозначены области, в которых стимулы могут свободно колебаться. Красным обозначен зазор, препятствующий столкновению стимулов.</figcaption>
</figure>
</center>

:::


::: {.callout-warning}

### Исходные параметры для генерации координатной сетки {#hw4-grid-coord-params}

* Разрешение (размер) экрана (`res_x`×`res_y`): 1920×1080
* Зазор между областями колебания стимулов (`gap`): 10
* Количество стимулов по ширине экрана (`n_x`): 7
* Количество стимулов по высоте экрана (`n_y`): 3
* Горизонтальный отступ от края экрана (`margin_x`): 100
* Вертикальный отступ от края экрана (`margin_y`): 100
* Горизонтальный размер стимула (`stim_size_x`): 100
* Вертикальный размер стимула (`stim_size_y`): 100
* Количество проб, для которых надо сгенерировать координаты (`n_trials`): 30

Все значения указаны в пикселях, кроме количества проб.

:::



### #3 {#hw4-13-title}

<img id="hw4-13-level" class="level"/>

::: {#hw4-13-task .task}

Рассчитайте координаты центров стимулов.

Необходимо получить два вектора --- `centers_x` и `centers_y` --- которые будут содержать координаты центров стимулов по `x` и по `y` соответственно. Количество значений в векторах должно совпадать с количетвом стимулов по ширине и высоте экрана соответственно.

Исходными параметрами, необходимым для расчета координат центра являются `res_x`, `res_y`, `margin_x`, `margin_y`, `n_x`, `n_y`.

:::

```{r hw4-13, eval=TRUE}
res_x = 1920 # screen resolution x
res_y = 1080 # screen resolution y
gap = 10 # gap between stimuli
n_x = 7 # number of stimuli on x
n_y = 3 # number of stimuli on y
margin_x = 100 # margin on x
margin_y = 100 # margin on y
stim_size_x = 100 # stimulus size on x
stim_size_y = 100 # stimulus size on y
n_trials = 30 # number of trials

step_x = (res_x - 2*margin_x) / (n_x + 1)
step_y = (res_y - 2*margin_y) / (n_y + 1)

centers_x <- seq(margin_x + step_x, res_x - margin_x - step_x, step_x) - res_x / 2
centers_y <- seq(margin_y + step_y, res_y - margin_y - step_y, step_y) - res_y / 2
```

::: {#hw4-13-autocheck .autocheck}
::: {#hw4-13-ir .input-requirements}

Для самопроверки в поле ниже введите через запятую значения координат центров по `x`, затем точку с запятой, а далее --- значения координат центров по `y`. Проверка игнорирует все пробелы.

:::

<input class="autocheck-input" type="text" id="hw4-13" placeholder="Введите ответ…">

<input class="autocheck-button" type="button" value="Проверить" onclick="check('hw4-13')">

::: {#hw4-13-fb .autocheck-feedback}
:::
:::

::: hints-wrapper
<details class="hints" id="hw4-13-hints">

<summary>Подсказки</summary>

<details class="hint">

<summary>Как делать задание?</summary>

* Используя данные о разрешении экрана, рассчитайте расстояния между центрами стимулов по `x` и `y` с учетом отступов от краёв экрана.
* Создайте две последовательности от самого левого (нижнего) положения стимула до самого правого (верхнего) положения стимула с шагом, равным расстоянию между центрами стимулов.
* Скорректируйте координаты с учетом позиции начала координат в центре экрана.

</details>

<details class="hint">

<summary>Что надо сделать?</summary>

* Рассчитайте расстояния между центрами стимулов.
    * Вычтите из разрешения экрана отступы, чтобы получить размеры поля, где могут располагаться стимулы.
    * Разделите соответствующие размеры на количество необходимых расстояний.
    * Расстояний между стимулами на одно больше, чем самих стимулов (см. рисунки выше).
* Сгенерируйте последовательности соответствующих координат центров стимулов:
    * Для `x` от самого левого до самого правого положения стимула с шагом, равным расстоянию между центрами по `x`.
    * Для `y` от самого нижнего до самого верхнего положения стимула с шагом, равным расстоянию между центрами по `y`.
* Скорректируйте координаты с учетом позиции начала координат в центре экрана: из полученных координат вычтите половину разрешения экрана по горизонтали и вертикали соответственно.

</details>

<details class="hint">

<summary>Ответ неверный</summary>

* Проверьте, правильно ли заданы входные параметры для расчета координат.
* Проверьте, разделили ли вы значения в векторах запятыми.
* Проверьте, отделили ли вы вектора друг от друга точкой с запятой.

</details>

</details>
:::

### #4 {#hw4-14-title}

<img id="hw4-14-level" class="level"/>

::: {#hw4-14-task .task}

Рассчитайте, на сколько максимально стимул может отклоняться по вертикали и горизонтали от координат центра, чтобы не сталкиваться с другими стимулами (`jitter_x` и `jitter_y`). Так как отклонения будут симметричны, учтите только одну сторону отклонения по одной оси --- влево и вниз или вправо и вверх.

Исходными параметрами, необходимым для расчета максимального отклонения являются `gap`, `stim_size_x`, `stim_size_y`, а также расстояние между центрами стимулов.

Если в ходе вычислений получаются нецелые значения, округлите их до ближайшего целого вниз.

:::

```{r hw4-14, eval=TRUE}
jitter_x = floor((step_x - gap - stim_size_x) / 2)
jitter_y = floor((step_y - gap - stim_size_y) / 2)
```

::: {#hw4-14-autocheck .autocheck}
::: {#hw4-14-ir .input-requirements}
Для самопроверки введите через запятую значения `jitter_x` и `jitter_y`. Проверка игнорирует все пробелы.
:::

<input class="autocheck-input" type="text" id="hw4-14" placeholder="Введите ответ…">

<input class="autocheck-button" type="button" value="Проверить" onclick="check('hw4-14')">

::: {#hw4-14-fb .autocheck-feedback}
:::
:::

::: {.hints-wrapper hidden="true"}
<details class="hints" id="hw4-14-hints">

<summary>Подсказки</summary>

<details class="hint">

<summary>Как делать задание?</summary>

</details>

<details class="hint">

<summary>Что надо сделать?</summary>

</details>

<details class="hint">

<summary>Ответ неверный</summary>

</details>

</details>
:::

### #5 {#hw4-15-title}

<img id="hw4-15-level" class="level"/>

::: {#hw4-15-task .task}
Сгенерируйте координаты стимулов для нескольких экспериментальных проб.

* Количество проб задано параметров `n_trials`.
* Итоговый датасет должен содержать колонку `trial`, которая будет задавать номер пробы, и колонки `pos1`...`posN`, где `N` --- общее количество стимулов на экране. Таким образом, в каждой колонке должны быть заданы координаты для отдельного стимула на экране. Количество стимулов на экране определяется параметрами `n_x` и `n_y`.
* Координаты в колонках `pos1`...`posN` должны быть представлены в формате `[x,y]`. Между символами не должно быть пробелов.
* Для каждого стимула в каждой пробе должны быть сгенерированы уникальные координаты с учетом возможного колебания стимула вокруг координат его центра. Диапазон колебаний по обеим осям задается значениями `jitter_x` и `jitter_y`.

Ниже представлен вариант итогового датасета.

:::

```{r hw4-15, eval=TRUE, message=FALSE}
set.seed(123)

library(tidyverse)

tibble(
  coords = outer(centers_x, 
                 centers_y, 
                 "paste") %>% 
    as.vector() %>% 
    rep(times = n_trials)) %>% 
  separate(coords, 
           into = c("x", "y"), 
           sep = " ") %>% 
  mutate_all(as.numeric) %>% 
  mutate(
    position = paste0("pos", 1:(n_x*n_y)) %>% 
      rep(times = n_trials),
    trial = rep(1:n_trials, each = n_x * n_y),
    x = x + sample(-jitter_x:jitter_x, n_trials * n_x * n_y, replace = TRUE),
    y = y + sample(-jitter_y:jitter_y, n_trials * n_x * n_y, replace = TRUE)) %>% 
  unite(coords, x, y, sep = ",") %>% 
  mutate(coords = str_c("[", coords, "]")) %>% 
  pivot_wider(names_from = position,
              values_from = coords) %>% 
  knitr::kable()
```

::: {#hw4-15-autocheck .autocheck}
::: {#hw4-15-ir .input-requirements}
Описание формата инпута.
:::

<input class="autocheck-input" type="text" id="hw4-15" placeholder="Введите ответ…">

<input class="autocheck-button" type="button" value="Проверить" onclick="check('hw4-15')">

::: {#hw4-15-fb .autocheck-feedback}
:::
:::

::: {.hints-wrapper}
<details class="hints" id="hw4-15-hints">

<summary>Подсказки</summary>

Полезные функции:

* `outer()`
* `as.vector()`
* `rep()`
* `separate()`, `unite()`
* `sample()`
* `mutate()`
* `paste()`, `str_c()`
* `pivot_wider()`

</details>
:::

```{=html}
<!--- CHANGE hw4 TO hw<n> IN THE LINES BELOW--->
<script type="text/javascript" src="./js/hw4.json"></script>
<script type="text/javascript" src="./js/hw.js"></script>
```
