# HW1 // Введение в R. Типы данных. Векторы {#hw1 .unnumbered}

```{=html}
<!--
REPLACE ALL hw1 TO hw<n> WITH MATCH CASE
-->
```

```{r opts, echo=FALSE}
knitr::opts_chunk$set(echo = FALSE, eval = FALSE, message = FALSE, warning = FALSE)
```

::: {.callout-warning}
## Напоминалка о контроле случайности

Все задания построены на работе со сгенерированным вектором чисел. Генерация каждый раз происходит (псевдо)случайным образом. Если вы хотите пользоваться возможностью самопроверки, перед каждой строчкой кода, где происходит генерация --- используются функции `rnorm()`, `sample()` --- добавьте строку с установкой зерна датчика случайных чисел 

```{r set-seed-callout, echo=TRUE}
set.seed(420)
```

и выполняйте код генерации вместе с данной строкой.

Автопроверка настроена на результаты, получающиеся при таких генерациях. Во всех других случаях ваши результаты будут отличаться.

Отсутствие строк с установкой зерна датчика случайных чисел при проверке работ тьюторами **не будет считаться ошибкой**.

:::

## Основные задания {#hw1_main}

### #1 {#hw1-1-title}

<img id="hw1-1-level" class="level"/>


::: {#hw1-1-task .task}
Сгенерируйте распределение некоторой изучаемой переменной в генеральной совокупности из 350 000 объектов с помощью функции `rnorm()` с параметрами `mean = 80` и `sd = 21`. Сохраните результат генерации в переменную `pop`.
:::

```{r 1, eval=TRUE}
set.seed(420)
pop <- rnorm(350000, 80, 21)
```

```{r 1-out}
pop[1:2]
```

::: {#hw1-1-autocheck .autocheck}
::: {#hw1-1-ir .input-requirements}
Для самопроверки скопируйте из консоли в поле ниже два первых значения получившегося вектора. Разделите значения запятой. Проверка игнорирует все пробелы.
:::

<input class="autocheck-input" type="text" id="hw1-1" placeholder="Введите ответ…">

<input class="autocheck-button" type="button" value="Проверить" onclick="check('hw1-1')">

::: {#hw1-1-fb .autocheck-feedback}
:::
:::

::: hints-wrapper
<details class="hints" id="hw1-1-hints">

<summary>Подсказки</summary>

<details class="hint">

<summary>Как делать задание?</summary>

* Используя функцию `rnorm()` нужно сгенерировать вектор. Для этого ей нужно передать три аргумента: количество значений, которые нужно сгененировать, среднее (`mean`) и стандартное отклонение (`sd`).
* Обратите внимание на порядок аргументов: следовать они должны именно так, как перечислены в предыдущем пункте.
* Сохраните результат генерации в переменной `pop` с помощью оператора присваивания `<-`.

</details>

<details class="hint">

<summary>Ответ неверный</summary>

* Проверьте, выполнили ли вы строчку строчку с установкой зерна датчика случайных чисел перед генерацией вектора.
* Проверьте, разделили ли вы значения запятой.
* Округлять значения не нужно.

</details>

</details>
:::

### #2 {#hw1-2-title}

<img id="hw1-2-level" class="level"/>

::: {#hw1-2-task .task}

Сгенерируйте случайную выборку из генеральной совокупности (`pop`) объемом 150 значений. Считайте, что все объекты генеральной совокупности равновероятно попадают в выборку. Сохраните результаты генерации в переменную `first_banch`.

:::

```{r 2, eval=TRUE}
set.seed(420)
first_banch <- sample(pop, 150)
```

```{r 2-out}
sum(first_banch)
```

::: {#hw1-2-autocheck .autocheck}
::: {#hw1-2-ir .input-requirements}
Для самопроверки в поле ниже введите сумму по получившемуся вектору.
:::

<input class="autocheck-input" type="text" id="hw1-2" placeholder="Введите ответ…">

<input class="autocheck-button" type="button" value="Проверить" onclick="check('hw1-2')">

::: {#hw1-2-fb .autocheck-feedback}
:::
:::

::: hints-wrapper
<details class="hints" id="hw1-2-hints">

<summary>Подсказки</summary>

<details class="hint">

<summary>Как делать задание?</summary>

* Используя функцию `sample()` нужно сгенерировать вектор. Для этого её нужно передать два обязательных аргумента: вектор, из которого она будет выбирать числа, и количество значений, которые нужно сгенерировать.
* Обратите внимание на порядок аргументов: следовать они должны именно так, как перечислены в предыдущем пункте.
* Сохраните результат генерации в переменной `first_bach` с помощью оператора присваивания `<-`.

</details>

<details class="hint">

<summary>Ответ неверный</summary>

* Проверьте, выполнили ли вы строчку строчку с установкой зерна датчика случайных чисел перед генерацией вектора.
* Округлять значения не нужно.

</details>

</details>
:::

### #3 {#hw1-3-title}

<img id="hw1-3-level" class="level"/>

::: {#hw1-3-task .task}
Удалите из полученный выборки 5 наибольших и 5 наименьших значений --- посчитаем их нехарактерными значениями (выбросами). Перезапишите вектор `first_banch`.
:::

```{r 3, eval=TRUE}
first_banch <- sort(first_banch)[-c(1:5, (length(first_banch)-4):length(first_banch))]
```

```{r 3-out}
sum(first_banch)
```

::: {#hw1-3-autocheck .autocheck}
::: {#hw1-3-ir .input-requirements}
Для самопроверки в поле ниже введите сумму по получившемуся после удаления значений вектору.
:::

<input class="autocheck-input" type="text" id="hw1-3" placeholder="Введите ответ…">

<input class="autocheck-button" type="button" value="Проверить" onclick="check('hw1-3')">

::: {#hw1-3-fb .autocheck-feedback}
:::
:::

::: hints-wrapper
<details class="hints" id="hw1-3-hints">

<summary>Подсказки</summary>

<details class="hint">

<summary>Как осмыслить задание?</summary>

* Нужно удалить 5 наибольших и 5 наименьших значений. Что нужно сделать с вектором, чтобы было проще его индексировать по индексам для решения задачи?
* Как должен выглядет вектор индексов?
    * Можете создать вспомогательный вектор `indices` и использовать его для индексации вектора выборки.
* Как обозначить при индексации удаление выбраных элементов?

</details>

<details class="hint">

<summary>Полезная функция</summary>

`sort()`

</details>

<details class="hint">

<summary>Удаляются почти все значения ((</summary>

Оператор `:` имеет более высокий приоритет по сравнению с арифметическими операторами. Соответственно, сначала выпоняется он, а затем арифметические операции.

</details>

<details class="hint">

<summary>Ответ неверный</summary>

* Проверьте, выполнили ли вы строчку строчку с установкой зерна датчика случайных чисел перед генерацией вектора.
* Проверьте, сколько значений осталось в векторе после удаления выбросов.
* Округлять значения не нужно.

</details>

</details>
:::

### #4 {#hw1-4-title}

<img id="hw1-4-level" class="level"/>

::: {#hw1-4-task .task}
Ваш коллега прислал вам вторую часть собранных данных. Выполните команду ниже, чтобы загрузить её в переменную `second_banch`.

```{r 4-task, echo=TRUE, eval=TRUE}
second_banch <- read.csv("https://raw.githubusercontent.com/angelgardt/wlm2023/master/data/hw1-second_banch.csv")$x
```

Объедините векторы `first_banch` и `second_banch` в один для дальнейшей работы. Назовите получившийся вектор `obs`.
:::

```{r 4-data, include=FALSE}
set.seed(312)
second_banch <- sample(pop, 38)
second_banch[sample(38, sample(2:10, 1))] <- NA
second_banch[36] <- "na"
data.frame(x = second_banch) |> write.csv("../data/hw1-second_banch.csv", quote = TRUE)
```

```{r 4, eval=TRUE}
obs <- c(first_banch, second_banch)
```

```{r 4-out}
length(obs)
```

::: {#hw1-4-autocheck .autocheck}
::: {#hw1-4-ir .input-requirements}
Для самопроверки в поле ниже введите длину получившегося вектора.
:::

<input class="autocheck-input" type="text" id="hw1-4" placeholder="Введите ответ…">

<input class="autocheck-button" type="button" value="Проверить" onclick="check('hw1-4')">

::: {#hw1-4-fb .autocheck-feedback}
:::
:::



### #5 {#hw1-5-title}

<img id="hw1-5-level" class="level"/>

::: {#hw1-5-task .task}
Исследуйте получившийся вектор:

* какой тип его данных?
* если ли в нем пропущенные значения?
* если есть, сколько их?

:::

```{r 5}
class(obs)
sum(is.na(obs))
```

::: {#hw1-5-autocheck .autocheck}
::: {#hw1-5-ir .input-requirements}
Для самопроверки в поле ниже введите через запятую обнаруженный тип данных и количество пропущенных значений. Название типа данных введите без кавычек. Если пропущенных значений нет, укажите 0. Проверка игнорирует все пробелы.
:::

<input class="autocheck-input" type="text" id="hw1-5" placeholder="Введите ответ…">

<input class="autocheck-button" type="button" value="Проверить" onclick="check('hw1-5')">

::: {#hw1-5-fb .autocheck-feedback}
:::
:::

::: hints-wrapper
<details class="hints" id="hw1-5-hints">

<summary>Подсказки</summary>

<details class="hint">

<summary>Как проверить тип  данных?</summary>

Можно использовать функции семейста `is.*()` или функции `class()` и `typeof()`.
</details>

<details class="hint">

<summary>Как посчитать количество пропусков?</summary>

Для этого нужно сначала проверить, является ли каждое значение вектора пропуском (`NA`), а затем посчитать сумму от результатов проверки.

</details>

<details class="hint">

<summary>Ответ неверный</summary>

* Проверьте, не опечатались ли вы в названии типа данных.
* Проверьте, разделили ли вы тип данных и количество пропусков запятой.

</details>

</details>
:::

### #6 {#hw1-6-title}

<img id="hw1-6-level" class="level"/>

::: {#hw1-6-task .task}
Приведите вектор `obs` в порядок, если необходимо:

* удалите пропущенные значения
* скорректируйте тип данных

Перезапишите объект `obs`.

:::

```{r 6, eval=TRUE}
obs <- as.numeric(obs)
obs <- obs[!is.na(obs)]
```

```{r 6-out}
length(obs)
```

::: {#hw1-6-autocheck .autocheck}
::: {#hw1-6-ir .input-requirements}
Для самопроверки введите количество элементов, оставшихся в векторе после того, как вы привели его в порядок.
:::

<input class="autocheck-input" type="text" id="hw1-6" placeholder="Введите ответ…">

<input class="autocheck-button" type="button" value="Проверить" onclick="check('hw1-6')">

::: {#hw1-6-fb .autocheck-feedback}
:::
:::

::: hints-wrapper
<details class="hints" id="hw1-6-hints">

<summary>Подсказки</summary>

<details class="hint">

<summary>Как делать задание?</summary>

* Предположите, откуда могла возникнуть сложившаяся проблема.
* Выполните приведение типа данных к нужному.
* Проверьте, решила ли проблема.
* Удалите пропущенные значения через индексацию вектора
* Сохраните полученный результат в переменную `obs`.

</details>

<details class="hint">

<summary>Как удалить пропуски?</summary>

* Проверьте, является ли каждое значение вектора пропуском.
* Помните, что `x == NA` ведет себя не так, как мы бы хотели.
* Используйте вектор, полученный при проверке, для индексации.
* Обратите внимание, что проверка на пропуск возвращает `TRUE`, если значение является пропуском. Нам же нужно отобрать те, которые не являются ими.

</details>

<details class="hint">

<summary>Ответ неверный</summary>

* Проверьте, что в векторе действительно не осталось пропущенных значений.

</details>

</details>
:::

### #7 {#hw1-7-title}

<img id="hw1-7-level" class="level"/>

::: {#hw1-7-task .task}
На полученном векторе `obs` рассчитайте:

* минимум
* максимум
* среднее
* медиану

:::

```{r}
min(obs); max(obs); mean(obs); median(obs)
```

::: {#hw1-7-autocheck .autocheck}
::: {#hw1-7-ir .input-requirements}
Для самопроверки введите через запятую полученные значения в порядке, указанном в задании. Проверка игнорирует все пробелы.
:::

<input class="autocheck-input" type="text" id="hw1-7" placeholder="Введите ответ…">

<input class="autocheck-button" type="button" value="Проверить" onclick="check('hw1-7')">

::: {#hw1-7-fb .autocheck-feedback}
:::
:::

::: hints-wrapper
<details class="hints" id="hw1-7-hints">

<summary>Подсказки</summary>

<details class="hint">

<summary>Ответ неверный</summary>

Проверьте последовательность вводимых значений.

</details>

</details>
:::

### #8 {#hw1-8-title}

<img id="hw1-8-level" class="level"/>

::: {#hw1-8-task .task}
a. Отсортируйте значения вектора по возрастанию
b. Найдите медиану первой (меньшей) половины значений
c. Найдите медиану второй (большей) половины значений

Так как количество элементов нечетное, считайте, что срединное значение входит в обе половины.

:::

```{r 8}
# b
median(sort(obs)[1:round(length(obs)/2)])
# c
median(sort(obs)[round(length(obs)/2):length(obs)])
```

::: {#hw1-8-autocheck .autocheck}
::: {#hw1-8-ir .input-requirements}
Для самопроверки введите в поле ниже через запятую значения, полученные в пунктах (b) и (c).
:::

<input class="autocheck-input" type="text" id="hw1-8" placeholder="Введите ответ…">

<input class="autocheck-button" type="button" value="Проверить" onclick="check('hw1-8')">

::: {#hw1-8-fb .autocheck-feedback}
:::
:::

::: hints-wrapper

<details class="hints" id="hw1-8-hints">

<summary>Подсказки</summary>

<details class="hint">

<summary>Как делать задание?</summary>

* Отсортируйте вектор с помощью функции `sort()`
* С помощью индексов отберите первую (меньшую) половину значений
* Передайте получившийся вектор в качестве аргумента функции `median()`
* Аналогично поступите со второй (большей) половиной

</details>

<details class="hint">

<summary>Как отобрать половину значений?</summary>

* Можно задать индексы руками, вычислив, какое количество элементов составляет половину вектора.
* Можно использовать идею, что индекс середины вектора --- это округленная половина его длины (`round`()`)

</details>

<details class="hint">

<summary>Ответ неверный</summary>

</details>
* Проверьте, правильно ли вы определили индекс срединного элемента
* Проверьте, что при расчете медиан вы включили срединный элемент в обе половины вектора
* Проверьте, что вы разделили значения запятой
</details>

:::

### #9 {#hw1-9-title}

<img id="hw1-9-level" class="level"/>

::: {#hw1-9-task .task}

Выборка нашего исследования включала в себя респондентов из пяти групп. Сгенерируйте группирующий вектор такой же длины, как и наша переменная, случайным образом из значений `gr1`, `gr2`, `gr3`, `gr4` и `gr5`. Сохраните результат генерации в переменную `condition`.

:::

```{r 9}
condition <- sample(c("gr1", "gr2", "gr3", "gr4", "gr5"), length(obs), replace = TRUE)
```


::: {#hw1-9-autocheck .autocheck}
::: {#hw1-9-ir .input-requirements}
:::

<input class="autocheck-input" type="text" id="hw1-9" placeholder="Введите ответ…">

<input class="autocheck-button" type="button" value="Проверить" onclick="check('hw1-9')">

::: {#hw1-9-fb .autocheck-feedback}
:::
:::

::: hints-wrapper
<details class="hints" id="hw1-9-hints">

<summary>Подсказки</summary>

<details class="hint">

<summary>Как делать задание?</summary>

* С помощью функции `sample()` сгенерируйте вектор необходимой длины из обозначенных в задании текстовых значений
* Сохраните его в переменную `condition` с помощью оператора присваивания `<-`

</details>

<details class="hint">

<summary>Функция падает с ошибкой</summary>

Количество допустимых значений (групп) меньше, чем неободимое количество элементов генерируемого вектора. Изучите аргумент `replace` функции `sample()`.

</details>

</details>
:::

### #10 {#hw1-10-title}

<img id="hw1-10-level" class="level"/>

::: {#hw1-10-task .task}

Проверьте, насколько группы в исследовании получились сбалансированы.

:::

::: {#hw1-10-autocheck .autocheck}
::: {#hw1-10-ir .input-requirements}
:::

<input class="autocheck-input" type="text" id="hw1-10" placeholder="Введите ответ…">

<input class="autocheck-button" type="button" value="Проверить" onclick="check('hw1-10')">

::: {#hw1-10-fb .autocheck-feedback}
:::
:::

::: hints-wrapper
<details class="hints" id="hw1-10-hints">

<summary>Подсказки</summary>

<details class="hint">

<summary>Как проверить сбалансированность групп?</summary>

* Чтобы проверить сбалансированность групп, надо посчитать, сколько вошло наблюдений в каждую группу.
* Это можно сделать, построив таблицу частот.

</details>

<details class="hint">

<summary>Как построить таблицу частот?</summary>

С помощью функции `table()`

</details>

</details>
:::

## Дополнительные задания {#hw1_add}

### #1 {#hw1-11-title}

<img id="hw1-11-level" class="level"/>

::: {#hw1-11-task .task}

Сейчас у нас лежат отдельно наблюдения (`obs`) и отдельно группы респондентов (`condition`). Хотелось бы как-то их связать друг с другом. Хоть мы и владеем из всех структур данных пока только вектором, у нас есть способ осуществить желаемое. Это **именованный вектор**.

Задайте элементам вектора `obs` имена, которыми будут элементы вектора `condition`. Таким образом, мы будем знать, к какой группе относиться каждое наблюдение.

:::

```{r 11}
names(obs) <- condition
```

::: {#hw1-11-autocheck .autocheck}
::: {#hw1-11-ir .input-requirements}
:::

<input class="autocheck-input" type="text" id="hw1-11" placeholder="Введите ответ…">

<input class="autocheck-button" type="button" value="Проверить" onclick="check('hw1-11')">

::: {#hw1-11-fb .autocheck-feedback}
:::
:::

::: hints-wrapper

<details class="hints" id="hw1-11-hints">

<summary>Подсказки</summary>

<details class="hint">

<summary>Как делать задание?</summary>

* В векторе `condition` содержать группы респондентов, а в векторе `obs` --- наблюдения.
* Каждое наблюдение относится к какой-либо группе.
* Если мы используем значения вектора `condition` как имена для вектора `obs` мы объединим данные из обоих векторов в одной структуре.
* Необходимо присвоить элементам `obs` имена из значений вектора `condition`.

</details>

<details class="hint">

<summary>Как задать имена элементам вектора?</summary>

И для вывода, и для задания имён используется функция `names()`.

</details>

</details>

:::



### #2 {#hw1-12-title}

<img id="hw1-13-level" class="level"/>

::: {#hw1-13-task .task}
В [задании 7](#hw1-7-title) мы рассчитали несколько значений, описывающих изучаемый нами вектор. Теперь, когда мы познакомились с именованным вектором, мы можем объединить все рассчитанные значения в один вектор и подписать их, чтобы не забыть, что есть что.

Возьмите код из [задания 7](#hw1-7-title) и дополните его так, чтобы результаты вычислений собирались в один именованный вектор. Необходимый результат представлен ниже.

```{r 12, eval=TRUE}
c(min = min(obs),
  max = max(obs),
  mean = mean(obs),
  median = median(obs))
```

:::

::: {#hw1-13-autocheck .autocheck}
::: {#hw1-13-ir .input-requirements}
:::

<input class="autocheck-input" type="text" id="hw1-13" placeholder="Введите ответ…">

<input class="autocheck-button" type="button" value="Проверить" onclick="check('hw1-13')">

::: {#hw1-13-fb .autocheck-feedback}
:::
:::

::: hints-wrapper
<details class="hints" id="hw1-13-hints">

<summary>Подсказки</summary>

<details class="hint">

<summary>Как делать задание?</summary>

Необходимо объединить четыре «функции» (их результаты) в вектор и при создании вектора задать имена его элементам.

</details>

<details class="hint">

<summary>Как задать имена элементам вектора?</summary>

Создавая вектор с помощью функции `c()` мы можем указать имя для каждого элемента:

```{r, echo=TRUE}
c(name1 = "x1", name2 = "x2", ...)
```

</details>

</details>
:::


### #3 {#hw1-13-title}

<img id="hw1-12-level" class="level"/>

::: {#hw1-12-task .task}
Возьмите получившийся вектор `obs` с наблюдениями и группами и разделите выборку на две равные подвыборки случайным образом. Сохраните результаты в переменные `sam1` и `sam2`.
:::

```{r 13}
set.seed(420)
indices <- sample(1:length(obs), length(obs)/2)
length(indices)
sam1 <- obs[indices]
sam2 <- obs[-indices]
```

::: {#hw1-12-autocheck .autocheck}
::: {#hw1-12-ir .input-requirements}
:::

<input class="autocheck-input" type="text" id="hw1-12" placeholder="Введите ответ…">

<input class="autocheck-button" type="button" value="Проверить" onclick="check('hw1-12')">

::: {#hw1-12-fb .autocheck-feedback}
:::
:::



### #4 {#hw1-14-title}

<img id="hw1-14-level" class="level"/>

::: {#hw1-14-task .task}
Проверьте сбалансированность групп по количеству наблюдений в получившихся подвыборках.
:::

```{r 14}
table(names(sam1))
table(names(sam2))
```
::: {#hw1-14-autocheck .autocheck}
::: {#hw1-14-ir .input-requirements}
:::

<input class="autocheck-input" type="text" id="hw1-14" placeholder="Введите ответ…">

<input class="autocheck-button" type="button" value="Проверить" onclick="check('hw1-14')">

::: {#hw1-14-fb .autocheck-feedback}
:::
:::



### #5 {#hw1-15-title}

<img id="hw1-15-level" class="level"/>

::: {#hw1-15-task .task}
Создайте вектор из первых десяти элементов последовательности

$$
x(n) = \frac{n^n}{\sqrt[n]{n}}
$$

:::

```{r 15}
(1:10)^(1:10) / (1:10)^(1/(1:10))
```


::: {#hw1-15-autocheck .autocheck}
::: {#hw1-15-ir .input-requirements}
Для самопроверки введите последний элемент получившегося вектора. Используйте научную нотацию числа (формата `1.23e+04`).
:::

<input class="autocheck-input" type="text" id="hw1-15" placeholder="Введите ответ…">

<input class="autocheck-button" type="button" value="Проверить" onclick="check('hw1-15')">

::: {#hw1-15-fb .autocheck-feedback}
:::
:::



```{=html}
<!--- CHANGE hw1 TO hw<n> IN THE LINES BELOW--->
<script type="text/javascript" src="./js/hw1.json"></script>
<script type="text/javascript" src="./js/hw.js"></script>
```
