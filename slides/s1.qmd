---
title: "L1 // Основы R. Типы и структуры данных. Функции и управляющие конструкции"
author: "Антон Ангельгардт"
format: 
  revealjs:
    logo: pics/logo.png
    footer: "WLM 2023"
    theme: style.scss
    transition: fade
    scrollable: true
    smaller: false
highlight-style: github
---

## Что будет?
```{js favicon-loader}
//  <link rel="icon" type="image/x-icon" href="pics/favicon.png">

var link = document.createElement('link');
link.type = 'image/x-icon';
link.rel = 'icon';
document.head.appendChild(link);
link.href = 'pics/favicon.png';
```

```{r opts, echo=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
```

```{r pkgs, echo=FALSE}
library(tidyverse)
theme_set(theme_bw())
library(latex2exp)
```


- R как язык программирования
    - Команды. Операторы и функции
    - Переменные и объекты
- Данные в R
    - Типы данных
    - Структуры данных
- Функции
    - Структура и создание функции
    - Условные ветвления и циклы



# L1.1 // Основы R. Типы и структуры данных

## R как язык программирования. Команды

- математические операции
- логические операции
- функции

<center>
<figure>
<img src="pics/rstudio-interface.png">
<figcaption>Интерфейс RStudio</figcaption>
</figure>
</center>

## Математические операции

Все в наличии:

```{r maths1}
2 + 3 # сложение
4 - 1 # вычитание
5 * 12 # умножение
5 ^ 8 # возведение в степень
4 / 7 # деление
5 %/% 3 # целочисленное деление
5 %% 3 # остаток от деления
```

Скобки работают:

```{r maths2}
6 / 3 + 2 * 4
6 / (3 + 2) * 4
6 / ((3 + 2) * 4)
```



## Функции

Можно посчитать корень:

```{r funs1}
sqrt(16)
```

Или логарифм:

```{r funs2}
log(10)
log(8, base = 2)
log(8, 2)
```

Джентельменский набор функций богат:

```{r funs3}
sin(5); cos(5); tan(5)
```


## Логические операции

Операторы сравнения:

```{r logic1}
5 > 4
6 < 2
5 >= 5
6 <= 3
23 == 14
77 != 98
```

Логические операторы И (`&`) и ИЛИ (`|`):

```{r logic2}
TRUE & TRUE
TRUE & FALSE
FALSE & FALSE
TRUE | TRUE
TRUE | FALSE
FALSE | FALSE
```


## Переменные и объекты

Результаты вычислений и преобразований хотелось бы сохранять.

```{r}
x <- 5
y <- 4 * 8
```

Над объектами тоже можно совершать разные операции:

```{r}
x + y
sqrt(x)
log(y, base = x)
```



# Типы данных

## Тип данных это что?

**Тип данных** --- это характеристика данных, которая определяет:

* **множество допустимых значений**, которые могут принимать данные этого типа
* **допустимые операции** над данными этого типа

## `numeric`

Это числа с десятичной частью.

```{r}
class(3.14)
typeof(3.14)
```


## `integer`

Это целые числа.

```{r}
class(3)
```

Хм...

```{r}
class(3L)
typeof(3L)
```

## `complex`

Комплексные числа тоже существуют, но я даже не знаю, когда вам придется их использовать.

```{r}
class(2+3i)
```


## `character`

Текст тоже надо как-то хранить.

```{r}
s1 <- 'a'
s2 <- "это строка"

class(s1)
class(s2)
```


## `logical`

Просто, ясно, лаконично --- всего два возможных значения.

```{r}
class(TRUE)
class(FALSE)
```


## `factor`

Бывают такие переменные, которые группируют наши данные. Например,

- город проживания (`Москва`, `Санкт-Петербург`, `Казань`, `Екатеринбург`)
- уровень образования (`бакалавриат`, `специалитет`, `магистратура`, `аспирантура`)
- экспериментальная группа (`group1`, `group2`, `control`)
- и др.

Обычно они текстовые. Для них был придуман тип данных `factor`.

`Ordered factor` (**упорядоченный фактор**) --- тип данных, который позволяет задать порядок групп. Например,

- уровень образования: `bachelor` < `master` < `phd` < `postdoc`
- сложность экспериментальной задачи: `easy` < `medium` < `hard`
- и др.


## Специальные литералы

### `NA`

Пропущенное значение (**N**ot **A**vailable). Обобзначает отсутствие значения там, где оно вроде бы должно быть. Причины могут быть разные:

- технические ошибки записи данных
- ошибки настройки платформы --- забыли сделать ответы обязательными
- организация исследования --- ограничили время на ответ
- «честный» пропуск --- дали возможность не отвечать на вопрос
- предобработка данных --- специально создали `NA`, чтобы далее с ними работать
- и др.


### `NaN`

Это не число (**N**ot a **N**umber).

```{r}
0 / 0
```


### `NULL`

Это ничто. Пустота. Используется для задания аргументов функций.



# Структуры данных

## Структура данных это что?

**Структура данных** --- это способ и форма объединения однотипных и/или логически связанных данных.

<center>
<figure>
<img src="pics/tidy-2.jpg">
<figcaption>Пример данных</figcaption>
</figure>
</center>



## Датафрейм

Воплощение привычной нам «таблицы» в R.

```{r, echo=FALSE}
head(ggplot2::diamonds)
```

Это сложная структура данных. Чтобы понять всю её мощь, необходимо начать с более простых.



## Векторы

Вектор --- это набор чисел.

$$
\pmatrix{1 & 4 & 36 & -8 & 90.1 & -14.5}
$$

## От направленного отрезка к набору чисел [1]

Возьмем направленный отрезок (вектор):

```{r vec-classic, echo=FALSE}
ggplot(NULL) +
  geom_segment(aes(x = 2, y = 1, xend = 3, yend = 3),
               arrow = arrow(), linewidth = 1) +
  geom_point(aes(x = c(2, 3), y = c(1, 3)), size = 2) +
  xlim(0, 5) + ylim(0, 5) +
  annotate(geom = "text", label = TeX("(2, 1)"), x = 2.5, y = 1) +
  annotate(geom = "text", label = TeX("(3, 3)"), x = 3.5, y = 3) +
  coord_fixed()
```

## От направленного отрезка к набору чисел [2]

[Договоримся](), что все векторы у нас начинаются из точки $(0, 0)$:

```{r vec-free, echo=FALSE}
ggplot(NULL) +
  geom_segment(aes(x = 0, y = 0, xend = 1, yend = 2),
               arrow = arrow(), linewidth = 1) +
  geom_point(aes(x = 1, y = 2), size = 2) +
  xlim(0, 5) + ylim(0, 5) +
  annotate(geom = "text", label = TeX("(1, 2)"), x = 1.5, y = 2) +
  coord_fixed()
```

## От направленного отрезка к набору чисел [3]

Уберем вектор:

```{r vec-remove-vector, echo=FALSE}
ggplot(NULL) +
  # geom_segment(aes(x = 0, y = 0, xend = 1, yend = 2),
  #              arrow = arrow(), linewidth = 1) +
  geom_point(aes(x = 1, y = 2), size = 2) +
  xlim(0, 5) + ylim(0, 5) +
  annotate(geom = "text", label = TeX("(1, 2)"), x = 1.5, y = 2) +
  coord_fixed()
```

## От направленного отрезка к набору чисел [4]

Получается, можно просто записать:

$$
\pmatrix{1 & 2}
$$


## Это одно и то же

$$
\pmatrix{1 & 0.5}, \quad \pmatrix{2 & 3}, \quad \pmatrix{4.2 & -3.5}
$$

```{r vec-same, echo=FALSE}
ggplot(NULL) +
  geom_segment(aes(x = 0, y = 0, 
                   xend = c(1, 2, 4.2), 
                   yend = c(.5, 3, -3.5)),
               arrow = arrow(), linewidth = 1) +
  xlim(0, 5) + ylim(-5, 5) +
  annotate(geom = "text", label = TeX(c("$(1, 0.5)$", "$(2, 3)$", "$(4.2, -3.5)$")), 
           x = c(1.3, 2.3, 4.5), 
           y = c(.5, 3, -3.5))
```

## Обобщаем вектор

Вектор --- это набор элементов одного типа.

```{r vec-types}
v_num <- c(1, 6, -34, 7.7)
v_char <- c("Москва", "Санкт-Петербург", "Нижний Новгород", "Пермь")
v_log <- c(TRUE, FALSE, TRUE, TRUE)
```

```{r vec-typer-print}
class(v_num)
v_num
class(v_char)
v_char
class(v_log)
v_log
```


## Индексация векторов

Из вектора можно вытащить его элемент:

```{r}
v_char[2] # по номеру
v_num[v_num > 5] # по условию
```


## Матрицы

<center>
<figure>
<img src="pics/vec-to-mat.png">
<figcaption>Варианты преобразования вектора в матрицу</figcaption>
</figure>
</center>


## Матрицы

```{r}
v <- 1:12
m1 <- matrix(v, nrow = 3)
m1

m2 <- matrix(v, nrow = 4)
m2

m3 <- matrix(v, nrow = 3, byrow = TRUE)
m3

m4 <- matrix(v, nrow = 4, byrow = TRUE)
m4
```


## Индексация матриц

Из матрицы можно вытащить её элементы:

```{r}
m1
m1[2, 3] # отдельный элемент
m1[1, ] # целую строку
m1[, 4] # целый столбец
m1[1:2, 2:4] # часть матрицы
```


## Массивы

- Вектор --- одномерный массив.
- Матрица --- двумерный массив.
- **Массивы** --- структуры,которые объединяют данные только одного типа.

```{r}
c(2, TRUE)
c(2, TRUE, "word")
```

При объединении разных типов данных в одном массиве происходит **приведение типов (coercion)** по следующей иерархии:

<center>
`logical` → `integer` → `numeric` → `complex` → `character`
</center>


## Списки

Списки позволяют объединять массивы различных типов данных.

<center>
<figure>
<img src="pics/list-structure.png">
<figcaption>Схема внутренней структуры списка</figcaption>
</figure>
</center>


## Списки

```{r}
l <- list(v1 = v_num,
          v2 = v_char,
          m1 = m1,
          ls = list(v = v,
                    m = m3))
l
```


## Индексация списков

```{r}
l[1] # по номеру элемента, возвращается список
l[[1]] # по номеру элемента, возвращается массив
l$ls # по названию элемента
l$ls$m # можно идти многоуровнево
```


## Собираем датафрейм

- возьмем список
- потребуем, чтобы его элементами были векторы
- потребуем, чтобы эти векторы были одинаковой длины
- расположим их «вертикально»

<center>
<figure>
<img src="pics/list-vs-df.png">
<figcaption>Структура списка и датафрейма</figcaption>
</figure>
</center>


## Индексация датафрейма

```{r, echo=FALSE}
head(ggplot2::diamonds) -> diam
```

```{r}
diam
```

```{r}
diam$carat # вытащить столбец
diam[diam$price > 330, ] # отобрать строки по условию
diam[, c(2:3, 7)] # вытащить столбцы по номерам
diam[1:4, c("carat", "price")] # вытащить отдельные строки по номерам и столбцы по названиям
```




# L1.2 // Основы R. Функции и управляющие конструкции

## Функции

When you click the **Render** button a document will be generated that includes:

-   Content authored with markdown
-   Output from executable code

## Условный оператор


## Циклы



When you click the `Render` button a presentation will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r, echo=TRUE}
1 + 1
```


## Формулы

$$
\mathbb{E}(X)=\frac{1}{n} \sum_{i=1}^n x_i
$$

$$
n \in \mathbb{N} \\
x \thicksim \mathcal{N}(0, 1)
$$


## Колонки

:::: {.columns}

::: {.column width="60%"}
Текст левой колонки
:::

::: {.column width="40%"}
Текст правой колонки
:::

::::


## Колонки с картинкой справа

:::: {.columns}

::: {.column width="60%"}
Текст левой колонки
:::

::: {.column width="40%"}
![](pics/test-pic.png)
:::

::::


## Колонки с картинкой слева

:::: {.columns}

::: {.column width="60%"}
![](pics/test-pic.png)
:::

::: {.column width="40%"}
Текст
:::

::::


## График

```{r plot}
plot(sample(1:100, 30))
```

## Итоги

- Пункт итогов
- Пункт итогов
- Пункт итогов


# L1. Основы R. Типы и структуры данных {#end}

:::: {.quarto-title-authors}
::: {.quarto-title-author}
Антон Ангельгардт
:::
::::