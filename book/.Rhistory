theme(legend.position = "bottom") +
# set colors
scale_color_manual(
values = c(
sin = "salmon",
cos = "royalblue",
csc = "orchid",
sec = "turquoise",
tan = "tan4",
cot = "orange2"
)
) -> acute
acute
# set angle
phi <-  6 * pi / 7
acute
# set angle
phi1 <-  pi / 5
# create data (start and end points of lines)
tibble(
func = factor(rep(
c("sin", "cos", "sec", "csc", "tan", "cot"),
each = 2
), ordered = TRUE, levels = c("sin", "cos", "sec", "csc", "tan", "cot")),
point = rep(c("start", "end"), times = 6),
x = c(cos(phi1), cos(phi1), 0, cos(phi1), 0, 1, 0, 0, 1, 1, 0, cos(phi1)),
y = c(0, sin(phi1), 0, 0, 0, tan(phi1), 0, 1 / sin(phi1), 0, tan(phi1), 1 / sin(phi1), sin(phi1)
)
) |>
# plot
ggplot() +
# axes
geom_vline(xintercept = 0, color = "gray") +
geom_hline(yintercept = 0, color = "gray") +
# circle
geom_circle(aes(x0 = 0, y0 = 0, r = 1)) +
# radius vector
geom_line(data = tibble(x = c(0, cos(phi1)),
y = c(0, sin(phi1))),
aes(x, y)) +
geom_arc(aes(x0 = 0, y0 = 0, r = .25, start = 3*pi/6-phi1, end = 3*pi/6)) +
# trig funs
geom_line(aes(x = x,
y = y,
color = func),
linewidth = 1) +
# point
geom_point(data = tibble(x = cos(phi1),
y = sin(phi1)),
aes(x, y)) +
# create grid
scale_x_continuous(breaks = seq(-1, 1, by = .5)) +
scale_y_continuous(breaks = seq(-1, 3, by = .5)) +
# fix proportions
coord_fixed(#xlim = c(-1, 1),
#ylim = c(-1, 1)
) +
labs(x = NULL, y = NULL, color = NULL) +
theme(legend.position = "bottom") +
# set colors
scale_color_manual(
values = c(
sin = "salmon",
cos = "royalblue",
csc = "orchid",
sec = "turquoise",
tan = "tan4",
cot = "orange2"
)
) -> acute
# set angle
phi2 <-  6 * pi / 7
# create data (start and end points of lines)
tibble(
func = factor(rep(
c("sin", "cos", "sec", "csc", "tan", "cot"),
each = 2
), ordered = TRUE, levels = c("sin", "cos", "sec", "csc", "tan", "cot")),
point = rep(c("start", "end"), times = 6),
x = c(cos(phi2), cos(phi2), 0, cos(phi2), 0, 1, 0, 0, 1, 1, 0, cos(phi2)),
y = c(0, sin(phi2), 0, 0, 0, tan(phi2), 0, 1 / sin(phi2), 0, tan(phi2), 1 / sin(phi2), sin(phi2)
)
) |>
# plot
ggplot() +
# axes
geom_vline(xintercept = 0, color = "gray") +
geom_hline(yintercept = 0, color = "gray") +
# circle
geom_circle(aes(x0 = 0, y0 = 0, r = 1)) +
# radius vector
geom_line(data = tibble(x = c(0, cos(phi2)),
y = c(0, sin(phi2))),
aes(x, y)) +
geom_arc(aes(x0 = 0, y0 = 0, r = .25, start = 3*pi/6-phi2, end = 3*pi/6)) +
# trig funs
geom_line(aes(x = x,
y = y,
color = func),
linewidth = 1) +
# point
geom_point(data = tibble(x = cos(phi),
y = sin(phi)),
aes(x, y)) +
# create grid
scale_x_continuous(breaks = seq(-1, 1, by = .5)) +
scale_y_continuous(breaks = seq(-1, 3, by = .5)) +
# fix proportions
coord_fixed(#xlim = c(-1, 1),
#ylim = c(-1, 1)
) +
labs(x = NULL, y = NULL, color = NULL) +
theme(legend.position = "bottom") +
# set colors
scale_color_manual(
values = c(
sin = "salmon",
cos = "royalblue",
csc = "orchid",
sec = "turquoise",
tan = "tan4",
cot = "orange2"
)
) -> obtuse
gridExtra::grid.arrange(acute, obtuse, ncol=2)
# set angle
phi2 <-  4 * pi / 5
# create data (start and end points of lines)
tibble(
func = factor(rep(
c("sin", "cos", "sec", "csc", "tan", "cot"),
each = 2
), ordered = TRUE, levels = c("sin", "cos", "sec", "csc", "tan", "cot")),
point = rep(c("start", "end"), times = 6),
x = c(cos(phi2), cos(phi2), 0, cos(phi2), 0, 1, 0, 0, 1, 1, 0, cos(phi2)),
y = c(0, sin(phi2), 0, 0, 0, tan(phi2), 0, 1 / sin(phi2), 0, tan(phi2), 1 / sin(phi2), sin(phi2)
)
) |>
# plot
ggplot() +
# axes
geom_vline(xintercept = 0, color = "gray") +
geom_hline(yintercept = 0, color = "gray") +
# circle
geom_circle(aes(x0 = 0, y0 = 0, r = 1)) +
# radius vector
geom_line(data = tibble(x = c(0, cos(phi2)),
y = c(0, sin(phi2))),
aes(x, y)) +
geom_arc(aes(x0 = 0, y0 = 0, r = .25, start = 3*pi/6-phi2, end = 3*pi/6)) +
# trig funs
geom_line(aes(x = x,
y = y,
color = func),
linewidth = 1) +
# point
geom_point(data = tibble(x = cos(phi),
y = sin(phi)),
aes(x, y)) +
# create grid
scale_x_continuous(breaks = seq(-1, 1, by = .5)) +
scale_y_continuous(breaks = seq(-1, 3, by = .5)) +
# fix proportions
coord_fixed(#xlim = c(-1, 1),
#ylim = c(-1, 1)
) +
labs(x = NULL, y = NULL, color = NULL) +
theme(legend.position = "bottom") +
# set colors
scale_color_manual(
values = c(
sin = "salmon",
cos = "royalblue",
csc = "orchid",
sec = "turquoise",
tan = "tan4",
cot = "orange2"
)
) -> obtuse
gridExtra::grid.arrange(acute, obtuse, ncol=2)
# create data (start and end points of lines)
tibble(
func = factor(rep(
c("sin", "cos", "sec", "csc", "tan", "cot"),
each = 2
), ordered = TRUE, levels = c("sin", "cos", "sec", "csc", "tan", "cot")),
point = rep(c("start", "end"), times = 6),
x = c(cos(phi2), cos(phi2), 0, cos(phi2), 0, 1, 0, 0, 1, 1, 0, cos(phi2)),
y = c(0, sin(phi2), 0, 0, 0, tan(phi2), 0, 1 / sin(phi2), 0, tan(phi2), 1 / sin(phi2), sin(phi2)
)
) |>
# plot
ggplot() +
# axes
geom_vline(xintercept = 0, color = "gray") +
geom_hline(yintercept = 0, color = "gray") +
# circle
geom_circle(aes(x0 = 0, y0 = 0, r = 1)) +
# radius vector
geom_line(data = tibble(x = c(0, cos(phi2)),
y = c(0, sin(phi2))),
aes(x, y)) +
geom_arc(aes(x0 = 0, y0 = 0, r = .25, start = 3*pi/6-phi2, end = 3*pi/6)) +
# trig funs
geom_line(aes(x = x,
y = y,
color = func),
linewidth = 1) +
# point
geom_point(data = tibble(x = cos(phi2),
y = sin(phi2)),
aes(x, y)) +
# create grid
scale_x_continuous(breaks = seq(-1, 1, by = .5)) +
scale_y_continuous(breaks = seq(-1, 3, by = .5)) +
# fix proportions
coord_fixed(#xlim = c(-1, 1),
#ylim = c(-1, 1)
) +
labs(x = NULL, y = NULL, color = NULL) +
theme(legend.position = "bottom") +
# set colors
scale_color_manual(
values = c(
sin = "salmon",
cos = "royalblue",
csc = "orchid",
sec = "turquoise",
tan = "tan4",
cot = "orange2"
)
) -> obtuse
gridExtra::grid.arrange(acute, obtuse, ncol=2)
# create data (start and end points of lines)
tibble(
func = factor(rep(
c("sin", "cos", "sec", "csc", "tan", "cot"),
each = 2
), ordered = TRUE, levels = c("sin", "cos", "sec", "csc", "tan", "cot")),
point = rep(c("start", "end"), times = 6),
x = c(cos(phi1), cos(phi1), 0, cos(phi1), 0, 1, 0, 0, 1, 1, 0, cos(phi1)),
y = c(0, sin(phi1), 0, 0, 0, tan(phi1), 0, 1 / sin(phi1), 0, tan(phi1), 1 / sin(phi1), sin(phi1)
)
) |>
# plot
ggplot() +
# axes
geom_vline(xintercept = 0, color = "gray") +
geom_hline(yintercept = 0, color = "gray") +
# circle
geom_circle(aes(x0 = 0, y0 = 0, r = 1)) +
# radius vector
geom_line(data = tibble(x = c(0, cos(phi1)),
y = c(0, sin(phi1))),
aes(x, y)) +
geom_arc(aes(x0 = 0, y0 = 0, r = .25, start = 3*pi/6-phi1, end = 3*pi/6)) +
# trig funs
geom_line(aes(x = x,
y = y,
color = func),
linewidth = 1) +
# point
geom_point(data = tibble(x = cos(phi1),
y = sin(phi1)),
aes(x, y)) +
# create grid
scale_x_continuous(breaks = seq(-1, 1, by = .5)) +
scale_y_continuous(breaks = seq(-1, 3, by = .5)) +
# fix proportions
coord_fixed(xlim = c(-1, 1),
ylim = c(-1, 1.75)
) +
labs(x = NULL, y = NULL, color = NULL) +
theme(legend.position = "bottom") +
# set colors
scale_color_manual(
values = c(
sin = "salmon",
cos = "royalblue",
csc = "orchid",
sec = "turquoise",
tan = "tan4",
cot = "orange2"
)
) -> acute
# set angle
phi2 <-  5 * pi / 6
# create data (start and end points of lines)
tibble(
func = factor(rep(
c("sin", "cos", "sec", "csc", "tan", "cot"),
each = 2
), ordered = TRUE, levels = c("sin", "cos", "sec", "csc", "tan", "cot")),
point = rep(c("start", "end"), times = 6),
x = c(cos(phi2), cos(phi2), 0, cos(phi2), 0, 1, 0, 0, 1, 1, 0, cos(phi2)),
y = c(0, sin(phi2), 0, 0, 0, tan(phi2), 0, 1 / sin(phi2), 0, tan(phi2), 1 / sin(phi2), sin(phi2)
)
) |>
# plot
ggplot() +
# axes
geom_vline(xintercept = 0, color = "gray") +
geom_hline(yintercept = 0, color = "gray") +
# circle
geom_circle(aes(x0 = 0, y0 = 0, r = 1)) +
# radius vector
geom_line(data = tibble(x = c(0, cos(phi2)),
y = c(0, sin(phi2))),
aes(x, y)) +
geom_arc(aes(x0 = 0, y0 = 0, r = .25, start = 3*pi/6-phi2, end = 3*pi/6)) +
# trig funs
geom_line(aes(x = x,
y = y,
color = func),
linewidth = 1) +
# point
geom_point(data = tibble(x = cos(phi2),
y = sin(phi2)),
aes(x, y)) +
# create grid
scale_x_continuous(breaks = seq(-1, 1, by = .5)) +
scale_y_continuous(breaks = seq(-1, 3, by = .5)) +
# fix proportions
coord_fixed(xlim = c(-1, 1),
ylim = c(-1, 1.75)
) +
labs(x = NULL, y = NULL, color = NULL) +
theme(legend.position = "bottom") +
# set colors
scale_color_manual(
values = c(
sin = "salmon",
cos = "royalblue",
csc = "orchid",
sec = "turquoise",
tan = "tan4",
cot = "orange2"
)
) -> obtuse
gridExtra::grid.arrange(acute, obtuse, ncol=2)
# set angle
phi2 <-  4.5 * pi / 5.5
# create data (start and end points of lines)
tibble(
func = factor(rep(
c("sin", "cos", "sec", "csc", "tan", "cot"),
each = 2
), ordered = TRUE, levels = c("sin", "cos", "sec", "csc", "tan", "cot")),
point = rep(c("start", "end"), times = 6),
x = c(cos(phi2), cos(phi2), 0, cos(phi2), 0, 1, 0, 0, 1, 1, 0, cos(phi2)),
y = c(0, sin(phi2), 0, 0, 0, tan(phi2), 0, 1 / sin(phi2), 0, tan(phi2), 1 / sin(phi2), sin(phi2)
)
) |>
# plot
ggplot() +
# axes
geom_vline(xintercept = 0, color = "gray") +
geom_hline(yintercept = 0, color = "gray") +
# circle
geom_circle(aes(x0 = 0, y0 = 0, r = 1)) +
# radius vector
geom_line(data = tibble(x = c(0, cos(phi2)),
y = c(0, sin(phi2))),
aes(x, y)) +
geom_arc(aes(x0 = 0, y0 = 0, r = .25, start = 3*pi/6-phi2, end = 3*pi/6)) +
# trig funs
geom_line(aes(x = x,
y = y,
color = func),
linewidth = 1) +
# point
geom_point(data = tibble(x = cos(phi2),
y = sin(phi2)),
aes(x, y)) +
# create grid
scale_x_continuous(breaks = seq(-1, 1, by = .5)) +
scale_y_continuous(breaks = seq(-1, 3, by = .5)) +
# fix proportions
coord_fixed(xlim = c(-1, 1),
ylim = c(-1, 1.75)
) +
labs(x = NULL, y = NULL, color = NULL) +
theme(legend.position = "bottom") +
# set colors
scale_color_manual(
values = c(
sin = "salmon",
cos = "royalblue",
csc = "orchid",
sec = "turquoise",
tan = "tan4",
cot = "orange2"
)
) -> obtuse
gridExtra::grid.arrange(acute, obtuse, ncol=2)
## CRAN mirror to use
CRAN_page <- function(...) {
file.path('https://cran.rstudio.com/src/contrib', ...)
}
parse_apache_directory_listing <- function(url) {
rbindlist(lapply(
htmllistparse$fetch_listing(url)[[2]], function(item) data.table(
Name = item$name,
`Last modified` = as.POSIXct(time$strftime('%Y-%m-%d %H:%M:%S', item$modified)),
Size = ifelse(is.null(item$size), 0, item$size))))
}
## we love data.table
library(data.table)
## get list of currently available packages on CRAN
library(reticulate)
install.packages("reticulate")
## get list of currently available packages on CRAN
library(reticulate)
## get list of currently available packages on CRAN
library(reticulate)
use_python('/usr/bin/python3', required = TRUE)
htmllistparse <- import('htmllistparse')
time <- import('time')
htmllistparse <- import('htmllistparse')
htmllistparse <- import('htmllistparse')
htmllistparse <- import('htmllistparse')
use_python('/usr/bin/python3', required = TRUE)
htmllistparse <- import('htmllistparse')
htmllistparse <- import('htmllistparse')
pkgs <- parse_apache_directory_listing(CRAN_page())
htmllistparse <- import('htmllistparse')
htmllistparse <- import('htmllistparse')
htmllistparse
htmllistparse <- import('htmllistparse')
time <- import('time')
htmllistparse <- import('htmllistparse')
## get list of currently available packages on CRAN
library(reticulate)
use_python('/usr/bin/python3', required = TRUE)
htmllistparse <- import('htmllistparse')
htmllistparse <- import('htmllistparse')
htmllistparse <- import('htmllistparse')
htmllistparse <- import('htmllistparse')
use_python('/usr/bin/python3', required = TRUE)
htmllistparse <- import('htmllistparse')
htmllistparse <- import('htmllistparse')
htmllistparse <- import('htmllistparse')
htmllistparse <- import('htmllistparse')
htmllistparse <- import('htmllistparse')
htmllistparse <- import('htmllistparse')
htmllistparse <- import('htmllistparse')
htmllistparse <- import('htmllistparse')
c("andan-descriptives.qmd",
"andan-ttest.qmd",
"andan-chisq.qmd",
"andan-corr.qmd",
"andan-nonparam.qmd",
"andan-simplelinear.qmd",
"andan-multiplelinear.qmd",
"andan-polynomial.qmd",
"andan-svr.qmd",
"andan-regreg.qmd",
"andan-anova.qmd",
"andan-ancova.qmd",
"andan-treesreg.qmd",
"andan-randforestreg.qmd",
"andan-distributions.qmd",
"andan-logreg.qmd",
"andan-poissonreg.qmd",
"andan-glmm.qmd",
"andan-gam.qmd",
"andan-manova.qmd",
"andan-treesclass.qmd",
"andan-randforestclass.qmd",
"andan-cluster.qmd",
"andan-lda.qmd",
"andan-pca.qmd",
"andan-ica.qmd",
"andan-cca.qmd",
"andan-efa.qmd",
"andan-sem.qmd",
"andan-cfa.qmd",
"andan-path.qmd",
"andan-timeseries.qmd") |> purrr::map(file.create)
c("randan-descriptives.qmd",
"randan-ttest.qmd",
"randan-chisq.qmd",
"randan-corr.qmd",
"randan-nonparam.qmd",
"randan-simplelinear.qmd",
"randan-multiplelinear.qmd",
"randan-polynomial.qmd",
"randan-svr.qmd",
"randan-regreg.qmd",
"randan-anova.qmd",
"randan-ancova.qmd",
"randan-treesreg.qmd",
"randan-randforestreg.qmd",
"randan-distributions.qmd",
"randan-logreg.qmd",
"randan-poissonreg.qmd",
"randan-glmm.qmd",
"randan-gam.qmd",
"randan-manova.qmd",
"randan-treesclass.qmd",
"randan-randforestclass.qmd",
"randan-cluster.qmd",
"randan-lda.qmd",
"randan-pca.qmd",
"randan-ica.qmd",
"randan-cca.qmd",
"randan-efa.qmd",
"randan-sem.qmd",
"randan-cfa.qmd",
"randan-path.qmd",
"randan-timeseries.qmd") |> purrr::map(file.create)
sessionInfo()
