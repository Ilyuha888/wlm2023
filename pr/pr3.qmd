# P3 // Датафреймы. Исследование данных {#pr3 .unnumbered}

{{< include ../book/_symbols.qmd >}}

```{r opts, echo=FALSE}
knitr::opts_chunk$set(echo = FALSE)
```

```{=html}
<!--
REPLACE ALL pr3 TO pr<n> WITH MATCH CASE
-->
```
## Основные задания {#pr3_main}

### #1 {#pr3-1-title}

<img id="pr3-1-level" class="level"/>

::: {#pr3-1-task .task}
Создайте проект (RStudio Project), в котором будете складывать материалы курса. Откройте его и создайте первый скрипт в этом проекте.
:::


::: hints-wrapper

<details class="hints" id="pr3-1-hints">

<summary>Подсказки</summary>

Как создать проект, описано [тут](../lectures/l2.html#l2-create-project)

</details>

:::

### #2  {#pr3-2-title}

<img id="pr3-2-level" class="level"/>

```{r, eval=FALSE}
library(tidyverse)
fs <- read.csv("../data/pr3/design_fastsearch.csv")
unique(fs$id)
fs %>% 
  select(-X) %>% 
  write_csv2("../data/pr3/des_fs.csv")

fs %>% 
  select(-X) %>% 
  filter(id == 1) %>% 
  mutate(date = "2019-02-12 11:56:31") %>% 
  write_csv2(paste0("../data/pr3/p3-data/des_fs_", 1, ".csv"))

fs %>% 
  select(-X) %>% 
  filter(id == 2) %>% 
  mutate(date = "2019-02-12 11:05:22") %>% 
  write_csv2(paste0("../data/pr3/p3-data/des_fs_", 2, ".csv"))

fs %>% 
  select(-X) %>% 
  filter(id == 3) %>% 
  mutate(date = "2019-02-12 12:31:14") %>% 
  write_csv2(paste0("../data/pr3/p3-data/des_fs_", 3, ".csv"))

fs %>% 
  select(-X) %>% 
  filter(id == 4) %>% 
  mutate(date = "2019-02-12 13:45:21") %>% 
  write_csv2(paste0("../data/pr3/p3-data/des_fs_", 4, ".csv"))

fs %>% 
  select(-X) %>% 
  filter(id == 5) %>%
  mutate(date = "2019-02-12 09:06:23") %>% 
  write_csv2(paste0("../data/pr3/p3-data/des_fs_", 5, ".csv"))

start <- as_datetime("2020-02-12 10:00:00", 
                     tz = "Europe/Moscow") %>% 
  as.numeric()
end <- as_datetime("2020-02-12 22:00:00", 
                   tz = "Europe/Moscow") %>% 
  as.numeric()

set.seed(314)

tibble(created_timestamp = sample(start:end, 5),
       created_date = as_datetime(created_timestamp),
       time_lag = c(12, 36, 43, 52, 41) * 60 + sample(1:60, 5),
       modified_timestamp = created_timestamp + time_lag,
       modified_date = as_datetime(modified_timestamp)) %>% View()
```

```{r, eval=FALSE}
# touch -a -m -t 201902121208.44 des_fs_1.csv
# touch -a -m -t 201902121141.28 des_fs_2.csv
# touch -a -m -t 201902121314.26 des_fs_3.csv
# touch -a -m -t 201902121438.01 des_fs_4.csv
# touch -a -m -t 201902120947.49 des_fs_5.csv
```

```{r, eval=FALSE}
rbind(
  file.info("../data/pr3/p3-data/des_fs_1.csv"),
  file.info("../data/pr3/p3-data/des_fs_2.csv"),
  file.info("../data/pr3/p3-data/des_fs_3.csv"),
  file.info("../data/pr3/p3-data/des_fs_4.csv"),
  file.info("../data/pr3/p3-data/des_fs_5.csv")
)
```

::: {#pr3-2-task .task}

Загрузите [данные](https://raw.githubusercontent.com/angelgardt/wlm2023/master/data/pr3/des_fs_1.csv) в R. По ссылке расположен CSV-файл.

Это данные эксперимента на зрительный поиск, в котором испытуемые должны были как можно быстрее найти целевой стимул. Сохраните данные в переменную `fs`.

:::


::: hints-wrapper
<details class="hints" id="pr3-2-hints">

<summary>Подсказки</summary>

`readLines()` поможет прочитать несколько строк, чтобы посмотреть, какова структура файла.

</details>
:::

### #3 {#pr3-3-title}

<img id="pr3-3-level" class="level"/>

::: {#pr3-3-task .task}
Посмотрите, корректно ли загрузился файл.

a. Выведите первые 10 строк датасета в консоль
b. Выведите посление 5 строк датасета в консоль

:::


::: hints-wrapper
<details class="hints" id="pr3-3-hints">

<summary>Подсказки</summary>

`head()`

`tail()`

</details>
:::

### #4 {#pr3-4-title}

<img id="pr3-4-level" class="level"/>

::: {#pr3-4-task .task}

Изучите структуру загруженного датасета.

* Сколько в нем наблюдений?
* Сколько в нем переменных?
* Какого они типа?

:::


::: hints-wrapper
<details class="hints" id="pr3-4-hints">

<summary>Подсказки</summary>

`str()`

</details>
:::

### #5 {#pr3-5-title}

<img id="pr3-5-level" class="level"/>

::: {#pr3-5-task .task}

Посмотрите базовые описательные статистики по всем переменным датасета. Используйте одну функцию.

Почему для разных переменных формат аутпута различается?

:::



::: hints-wrapper
<details class="hints" id="pr3-5-hints">

<summary>Подсказки</summary>

`summary()`

</details>
:::

### #6 {#pr3-6-title}

<img id="pr3-6-level" class="level"/>

::: {#pr3-6-task .task}
a. Мы знаем, что файлы данных считываются функциями типа `read...()` в датафрейм. Но давайте в этом дополнительно убедимся. Проверьте, какой структурой данных является объект `fs`.
b. Выведите названия столбцов датасета.
с. Выведите названия строк датасета.
:::



::: hints-wrapper
<details class="hints" id="pr3-6-hints">

<summary>Подсказки</summary>

`class()`

`colnames()` и `rownames()`

</details>
:::

### #7 {#pr3-7-title}

<img id="pr3-7-level" class="level"/>

::: {#pr3-7-task .task}
Продолжаем работать с датафреймом `fs`:

a. Выведите содержимое столбца `time` --- должен вернуться вектор.
b. Выведите содержимое первого столбца --- должен вернуться вектор.
c. Выведите содержимое первого столбца --- должен вернуться датафрейм.
d. Выведите содержимое столбца `cond` --- должен вернуться датафрейм.
:::


::: hints-wrapper
<details class="hints" id="pr3-7-hints">

<summary>Подсказки</summary>

Вспомните об особенностях индексации списков.

</details>
:::

### #8 {#pr3-8-title}

<img id="pr3-8-level" class="level"/>

::: {#pr3-8-task .task}

Всё ещё продолжаем работать с датафреймом `fs`:

a. Выведите три первые столбца датафрейма
b. Выведите первые 30 строк датафрейма
с. Выведите содержимое третьей и четвертой колонок из первых десяти строк датафрейма 
d. Выведите значение, которое лежит во втором столбце 340-ой строки

:::


::: hints-wrapper
<details class="hints" id="pr3-8-hints">

<summary>Подсказки</summary>

Вспомните об особенностях индексации матриц.

</details>
:::

### #9 {#pr3-9-title}

<img id="pr3-9-level" class="level"/>

::: {#pr3-9-task .task}
a. Выведите типы данных столбцов датафрейма с помощью одной команды.
b. Выясните, есть ли пропущенные значения в данных.
:::


::: hints-wrapper
<details class="hints" id="pr3-9-hints">

<summary>Подсказки</summary>

a. `sapply()` + `class()`
b. `sum()` + `is.na()`

</details>
:::

### #10 {#pr3-10-title}

<img id="pr3-10-level" class="level"/>

::: {#pr3-10-task .task}
До этого момента мы жили в прекрасном мире, когда у нас был целый датасет. Однако часто данные разбросаны по нескольким файлам.

Скачайте [архив](https://drive.google.com/uc?export=download&id=1rylrELRONRxzB4mMJVX6YDz2d06ohAWa), в котором лежит несколько файлов данных от разных испытуемых, которые прошли один и тот же эксперимент. Разархивируйте его в папку проекта, которую мы создали в [задании 1](#pr3-1-title).

a. Выведите названия файлов, которые лежат в разархивированной папке.
b. Сколько файлов содержится в скачаной папке?
:::


::: hints-wrapper
<details class="hints" id="pr3-10-hints">

`dir()`

</details>
:::

### #11 {#pr3-11-title}

<img id="pr3-11-level" class="level"/>

::: {#pr3-11-task .task}
Имеющиеся в нашем распоряжении файлы данных имеют одинаковую структуру, так как собирались с помощью одного и того же ПО.

Загрузите все данные из скачанных файлов, объединив их в один датафрейм. Сохраните результат в переменную `fs5`.
:::



::: hints-wrapper
<details class="hints" id="pr3-11-hints">

`for (...) {...}` + `rbind()`

</details>
:::

### #12 {#pr3-12-title}

<img id="pr3-12-level" class="level"/>

::: {#pr3-12-task .task}
a. В столбце `cond` содержатся закодированные сочетания экспериментальных условий. Сколько таких сочетаний было в эксперименте?
b. Сколько в данных наблюдений, относящихся к каждому из сочетаний экспериментальных условий?
c. Отберите из данных наблюдения, которые относятся к сочетанию условий `f3_p`.
d. Отберите из данных числовые переменные.
:::



::: hints-wrapper
<details class="hints" id="pr3-12-hints">

<summary>Подсказки</summary>

Вспомните, как мы индексировали массивы по условию.

</details>
:::

### #13 {#pr3-13-title}

<img id="pr3-13-level" class="level"/>

::: {#pr3-13-task .task}
В данных `fs5` содержится колонка `date` --- это дата и время начала прохождения эксперимента.

a. Эта переменная выглядит как текстовая. Проверьте, так ли это.
b. При необходимости приведите её к типу `datetime`.

:::



::: hints-wrapper
<details class="hints" id="pr3-13-hints">

<summary>Подсказки</summary>

Понадобится пакет `lubridate`. Установить его можно командой 

```{r, echo=TRUE, eval=FALSE}
install.packages("lubridate")
```

Однако данный пакет являются частью `tidyverse`, который нам понадобится уже на следующей практике, поэтому лучше сделать 

```{r, echo=TRUE, eval=FALSE}
install.packages("tidyverse")
```

Чтобы привести текст к дате пригодится `as_datetime()`.

</details>
:::

### #14 {#pr3-14-title}

<img id="pr3-14-level" class="level"/>

::: {#pr3-14-task .task}
а. В каком году собраны данные?
b. В каком месяце собраны данные?
с. Сколько дней собирались данные?
:::



::: hints-wrapper
<details class="hints" id="pr3-14-hints">

<summary>Подсказки</summary>

`year()`

`month()`

`day()`

</details>
:::

### #15 {#pr3-15-title}

<img id="pr3-15-level" class="level"/>

::: {#pr3-15-task .task}
На основе имеющихся данных составьте датасет, в котором будут содержаться идентификаторы испытуемых и даты, когда они проходили эксперимент. Количество строк в итоговом датасете должно совпадать с количеством испытуемых. Сохраните его в переменную `fs_dates`.
:::



::: hints-wrapper
<details class="hints" id="pr3-15-hints">

<summary>Подсказки</summary>

`duplicated()`

</details>
:::

### #16 {#pr3-16-title}

<img id="pr3-16-level" class="level"/>

::: {#pr3-16-task .task}
Нам надо проверить испытуемых на честность. Известно, что эксперимент занимает 30--40 минут --- если человек проходит его быстрее, вероятно, он был недостаточно внимаетелн или вовсе просто прокликал все пробы. Справедливо не учитывать такого испытуемого в анализе.

Данные о начале эксперимента у нас есть --- это дата и время создания файла (`date`). Однако информации о том, когда эксперимент закончился у нас нет. Или?

Эксперимент завершился тогда, когда все данные были записаны в файл --- то есть в тот момент, когда произошло последнее изменение файла.

Возмите для примера файл `des_fs_1.csv` и вытащите его метаданные, в которых содержится информацию о дате его создания, изменения и последнего доступа.
:::



::: hints-wrapper
<details class="hints" id="pr3-16-hints">

<summary>Подсказки</summary>

`file.info()`

</details>
:::

### #17 {#pr3-17-title}

<img id="pr3-17-level" class="level"/>

::: {#pr3-17-task .task}
Взяв за основу цикл из [задания 11](#pr3-11-title), соберите метаданные из всех файлов в единый датафрейм. Назовите его `fs_meta`.
:::


::: {.hints-wrapper hidden=true}

<details class="hints" id="pr3-17-hints">

<summary>Подсказки</summary>

</details>

:::

### #18 {#pr3-18-title}

<img id="pr3-18-level" class="level"/>

::: {#pr3-18-task .task}
Объедините данные из датафреймов `fs_dates` и `fs_meta`. Итоговый датасет должен содержать следующие колонки: `id`, `date`, `mtime`. Перезапишите объект `fs_dates`.
:::



::: hints-wrapper
<details class="hints" id="pr3-18-hints">

<summary>Подсказки</summary>

`cbind()`

</details>
:::

### #19 {#pr3-19-title}

<img id="pr3-19-level" class="level"/>

::: {#pr3-19-task .task}
Вычислите, сколько времени затратил каждый испытуемый на прохождение эксперимента. Сохраните результаты вычислений в новую колонку `duration` датафрейма `fs_dates`.

Есть ли испытуемые, которых необходимо исключить из анализа?
:::



::: hints-wrapper
<details class="hints" id="pr3-19-hints">

<summary>Подсказки</summary>

`difftime()`

</details>
:::

### #20 {#pr3-20-title}

<img id="pr3-20-level" class="level"/>

::: {#pr3-20-task .task}
Экспортируйте получившийся датасет в формате CSV.
:::


::: hints-wrapper
<details class="hints" id="pr3-20-hints">

<summary>Подсказки</summary>

`write.csv()`

</details>
:::

## Дополнительные задания {#pr3_add}

### #1 {#pr3-21-title}

<img id="pr3-21-level" class="level"/>

::: {#pr3-21-task .task}
Познакомьтесь с работой функции `View()`. Попробуйте вызвать её на объекте `fs`. При необходимости ознакомьтесь с документацией по этой функции
:::


::: {.hints-wrapper hidden=true}
<details class="hints" id="pr3-21-hints">

<summary>Подсказки</summary>


</details>
:::

### #2 {#pr3-22-title}

<img id="pr3-22-level" class="level"/>

::: {#pr3-22-task .task}
Иногда --- хотя последнее время всё реже --- встречаются файлы данных, которые пришли нам из других статистических программ. Например, файлы SPSS имеют собственное расширение `.sav`. Они загружаются в R с помощью функции `read.spss` из пакета `foreign` или `read_sav` из пакета `haven`.

[По ссылке](https://github.com/angelgardt/wlm2023/raw/master/data/pr3/depress.sav) есть данные в формате `.sav`. Скачайт их и загрузите в R с помощью какой-либо из указанных выше функций. Обратите внимание на особенности загрузки данных. При необходимости изучите документацию к функциям.

:::


::: {.hints-wrapper hidden=true}
<details class="hints" id="pr3-22-hints">

<summary>Подсказки</summary>

</details>
:::

### #3 {#pr3-23-title}

<img id="pr3-23-level" class="level"/>

::: {#pr3-23-task .task}
На предыдущих практиках мы рассматривали функцию `Map()`, которая может заменять цикл. Реализуйте с её помощью загрузку нескольких файлов из [задания 11](#pr3-11-title).
:::



::: {.hints-wrapper hidden=true}
<details class="hints" id="pr3-23-hints">

<summary>Подсказки</summary>

`<<-`

</details>
:::

### #4 {#pr3-24-title}

<img id="pr3-24-level" class="level"/>

::: {#pr3-24-task .task}

Возьмите датасет `fs_dates` из [задания 19](#pr3-19-title) и создайте в нем переменные `start` и `end`, которые будут содержать в себе временную метку (timestamp) из колонок `date` и `mtime` соответственно. Посчитайте продолжительность прохождения эксперимента в минутах на основе переменных `start` и `end`. Сравните с содержимым переменной `duration`.

:::



::: hints-wrapper
<details class="hints" id="pr3-24-hints">

<summary>Подсказки</summary>

`as.numeric()`

</details>
:::


```{r, eval=FALSE}
write(jsonlite::toJSON(fs), "../data/pr3/des_fs.json")
library(XML)
doc_xml <- newXMLDoc(isHTML = FALSE)

# create a table node
table_node <- newXMLNode("table", doc = doc_xml)

# row data
row_data <- apply(fs, 1, function(x) {
  z1 <- newXMLNode('row') # create a new node for each row
  addChildren(z1, lapply(names(x), function(y) newXMLNode(y, x[y])))
})

# add row data to table node
xmlParent(row_data) <- table_node

# save as xml file
saveXML(doc_xml, file = "../data/pr3/des_fs.xml")
```


### #5 {#pr3-25-title}

<img id="pr3-25-level" class="level"/>


::: {#pr3-25-task .task}
В [лекции](../lectures/l2.html#json) упоминался формат файлов JSON. Попробуем загрузить датасет `fs`, с которым мы работали на этой практике, но теперь из [JSON-файла](https://raw.githubusercontent.com/angelgardt/wlm2023/master/data/pr3/des_fs.json). Для этого нужна будет функция `read_json` из пакета `jsonlite`.

Загрузка JSON-файла имеет свои особенности. Обратитесь к документации функции, чтобы их изучить.
:::


::: {.hints-wrapper hidden=true}
<details class="hints" id="pr3-25-hints">

<summary>Подсказки</summary>



</details>
:::

### #6 {#pr3-26-title}

<img id="pr3-26-level" class="level"/>

::: {#pr3-26-task .task}
В [лекции](../lectures/l2.html#xml) упоминался формат файлов данных с особой разметкой XML. Попробуем загрузить датасет `fs`, с которым мы работали на этой практике, но теперь из [XML-файла](https://raw.githubusercontent.com/angelgardt/wlm2023/master/data/pr3/des_fs.xml). Для этого нужна будет функция `xmlToDataFrame` из пакета `XML`.

Загрузка XML-файла имеет свои особенности. Обратитесь к документации функции, чтобы их изучить.
:::



::: {.hints-wrapper hidden=true}
<details class="hints" id="pr3-26-hints">

<summary>Подсказки</summary>


</details>
:::

### #7 {#pr3-27-title}

<img id="pr3-27-level" class="level"/>

::: {#pr3-27-task .task}
R позволяет управлять структурой проекта, не выходят из скрипта. Найдите функцию, которая создает папку внутри рабочей директории. Создайте с её помощью папку `scripts` и сложите в неё скрипты, который успели накопиться за время курса.
:::


::: {.hints-wrapper hidden=true}
<details class="hints" id="pr3-27-hints">

<summary>Подсказки</summary>


</details>
:::

### #8 {#pr3-28-title}

<img id="pr3-28-level" class="level"/>

::: {#pr3-28-task .task}
Иногда бывает так, что мы обнаруживаем битый файл среди файлов данных. Нам ничего не остается, как удалить его. Можно сделать это вручную, однако потом мы вполне можем забыть, что у нас был такой файл и мы его удаляли --- и количество респондентов и файлов не сойдется. Отыщите функцию, которая позвляет удалить файл прямо из скрипта. Она позволит оставить в скрипте след о том, что файл был удален, что позволит нам не забыть о произошедшем проишествии.
:::



::: {.hints-wrapper hidden=true}
<details class="hints" id="pr3-28-hints">

<summary>Подсказки</summary>



</details>
:::

### #9 {#pr3-29-title}

<img id="pr3-29-level" class="level"/>

::: {#pr3-29-task .task}
Выйдите из проекта курса и проверьте, какую папку R считает рабочей директорией по умолчанию.
:::


::: hints-wrapper
<details class="hints" id="pr3-29-hints">

<summary>Подсказки</summary>

`getwd()`

</details>
:::

### #10 {#pr3-30-title}

<img id="pr3-30-level" class="level"/>

::: {#pr3-30-task .task}
Скорее всего, он считает рабочей директорией по умолчанию папку пользователя операционной системы. Чтобы файлы, которые вы будете создавать по той или иной причине вне проектов не болтались просто в папке пользователя и не путались с другими файлами, создайте папку `R`, которая будет дефолтной рабочей директорией. Задайте её в качестве таковой через настройки: `Tools > Global Options... > General > R Session > Default working directory`.

Можете выбрать другое название папки, которое считаете удобным для работы.
:::


::: {.hints-wrapper hidden=true}
<details class="hints" id="pr3-30-hints">

<summary>Подсказки</summary>


</details>
:::

```{=html}
<!--- CHANGE pr3 TO pr<n> IN THE LINES BELOW--->
<script type="text/javascript" src="./js/pr3.json"></script>
<script type="text/javascript" src="./js/pr.js"></script>
```
