# P2 // Матрицы и списки. Функции {#pr2 .unnumbered}


{{< include ../book/_symbols.qmd >}}

```{r opts, echo=FALSE}
knitr::opts_chunk$set(echo = FALSE)
```

```{=html}
<!--
REPLACE ALL pr2 TO pr<n> WITH MATCH CASE
-->
```
## Основные задания {#pr2_main}

### #1 {#pr2-1}

<img id="pr2-1-level" class="level"/>

::: {#pr2-1-task .task}
Создайте матрицу, размером 5×5, из единиц. Сохраните её в переменную `m`.
:::

```{r 1}
m <- matrix(1, nrow = 5, ncol = 5)
m
```


### #2 {#pr2-2}

<img id="pr2-2-level" class="level"/>

::: {#pr2-2-task .task}
Замените все некрайние значения на нули. Перезапишите переменную `m`.
:::

```{r 2}
m[2:4, 2:4] <- 0
m
```

::: hints-wrapper
<details class="hints" id="pr2-2-hints">

<summary>Подсказки</summary>

<details class="hint">

<summary>Как делать задание?</summary>

</details>

<details class="hint">

<summary>Что надо сделать?</summary>

</details>

<details class="hint">

<summary>Ответ неверный</summary>

</details>

</details>
:::


### #3 {#pr2-3}

<img id="pr2-3-level" class="level"/>

::: {#pr2-3-task .task}

Выделите из матрицы `m`:

a. вторую строку

```{r 3a}
m[2,]
```

b. первый столбец

```{r 3b}
m[, 1]
```

c. строки с третьей по пятую

```{r 3c}
m[3:5, ]
```

d. второй и третий столбы

```{r 3d}
m[, 2:3]
```

:::



### #4 {#pr2-4}

<img id="pr2-4-level" class="level"/>

::: {#pr2-4-task .task}
Сравните вторую строку и третий столбец матрицы `m`.
:::

```{r 4}
m[2, ] == m[, 3]
```



### #5 {#pr2-5}

<img id="pr2-5-level" class="level"/>

::: {#pr2-5-task .task}
Создайте таблицу умножения. Это должна быть матрица, размером 9×9, в которой на пересечении $i$-ой строки и $j$-го столбца находится произведение $i \times j$. Сохраните результат в переменную `multab`.
:::

```{r 5}
multab <- matrix(rep(1:9, each = 9) * rep(1:9, times = 9), ncol = 9)
multab
```



### #6 {#pr2-6}

<img id="pr2-6-level" class="level"/>

::: {#pr2-6-task .task}

Поработайте с переменной `multab`.

a. выделите 71-ый элемент матрицы

```{r 6a}
multab[71]
```

b. замените все значения, меньшие 10, на пропуски (`NA`)

```{r 6b}
multab[multab < 10] <- NA
multab
```

:::



### #7 {#pr2-7}

<img id="pr2-7-level" class="level"/>

::: {#pr2-7-task .task}
Примените к матрице `multab` функции `sum()`, `mean()`, `median()`, которые мы применяли к векторам. Учтите, что в данных есть пропуски --- ведь мы их туда своими руками добавили.

Что получилось? Почему так?

:::

```{r 7}
sum(multab, na.rm = TRUE)
mean(multab, na.rm = TRUE)
median(multab, na.rm = TRUE)
```



### #8 {#pr2-8}

<img id="pr2-8-level" class="level"/>

::: {#pr2-8-task .task}

**8.1** Для матрицы `m` посчитайте сумму:

a. по каждой строке

```{r 8-1a}
apply(m, 1, sum)
```

b. по каждому столбцу

```{r 8-1b}
apply(m, 2, sum)
```

**8.2** Для матрицы `multab` посчитайте сумму по каждому столбцу.

```{r 8-2}
apply(multab, 2, sum, na.rm = TRUE)
```

:::

::: hints-wrapper
<details class="hints" id="pr2-8-hints">

<summary>Подсказка</summary>

`apply()`

</details>
:::

### #9 {#pr2-9}

<img id="pr2-9-level" class="level"/>

::: {#pr2-9-task .task}
Создайте список, который будет содержать следующие элементы:

* вектор `letters` под названием `alphabet`
* значение `TRUE` под названием `logic`
* матрицу `multab` под названием `multab`

Сохраните список в переменную `first_list`.
:::

```{r 9}
first_list <- list(alphabet = letters,
                   logic = TRUE,
                   multab = multab)
first_list
```



### #10 {#pr2-10}

<img id="pr2-10-level" class="level"/>

::: {#pr2-10-task .task}

Выделите из списка `first_list`:

a. первый элемент (по номеру) --- должен вернуться список

```{r 10a}
first_list[1]
```

b. матрицу `multab` (по названия) --- должен вернуться список

```{r 10b}
first_list["multab"]
```

c. матрицу `multab` --- должна вернуться матрица

```{r 10c}
first_list$multab
```

d. логический элемент `logic` --- должен вернуться вектор

```{r 10d}
first_list$logic
```

:::



### #11 {#pr2-11}

<img id="pr2-11-level" class="level"/>

::: {#pr2-11-task .task}
Выделите из списка `first_list`: 

a. первые 5 элементов вектора `alphabet`

```{r 11a}
first_list$alphabet[1:5]
```

b. два последних столбца матрицы `multab`

```{r 11b}
first_list$multab[, 8:9]
```


с. третий элемент логического вектора `logic`

```{r 11c}
first_list$logic[3]
```

:::



### #12 {#pr2-12}

<img class="level"/>

::: {#pr2-12-task .task}
a. Напишите функцию `mul(x, y)`, которая будет перемножать два своих аргумента.

```{r 12a}
mul <- function(x, y) {
  return(x * y)
}
```

```{r 12a-call, echo=TRUE}
mul(2,3)
mul(-4, -8)
mul(0.5, 6)
```

b. Напишите функцию `sqrtn(x, n)`, которая будет извлекать корень любой степени из любого числа.

```{r 12b}
sqrtn <- function(x, n) {
  # message("n is negative\n")
  x^(1/n)
}
```

```{r 12b-call, echo=TRUE}
sqrtn(4, 2)
sqrtn(27, 3)
sqrtn(30, -5)
sqrtn(-2, 2)
```

:::

::: hints-wrapper

<details class="hints" id="pr2-8-hints">

<summary>Подсказка</summary>

$$
\sqrt[n]{x} = x^{\frac{1}{n}}
$$

</details>

:::


### #13 {#pr2-13}

<img id="pr2-13-level" class="level"/>

::: task
Модифицируйте функцию из [предыдущего задания](#pr2-12), чтобы она могла обрабатывать отрицательный `x` при любом `n` --- то есть функция не должна возвращать `NaN`.

```{r 13}
sqrtn <- function(x, n) {
  if (x < 0) x <- as.complex(x)
  x^(1/n)
}
```

```{r 13-call}
sqrtn(4, 2)
sqrtn(27, 3)
sqrtn(30, -5)
sqrtn(-2, 2)
sqrtn(-27, 3)
```

:::

::: hints-wrapper
<details class="hints" id="pr2-13-hints">

<summary>Подсказка</summary>

Чтобы извлечь корень из отрицательного числа, необходимо привести его типу `complex`.

</details>
:::

### #14 {#pr2-14}

<img id="pr2-14-level" class="level"/>

::: {#pr2-14-task .task}
Напишите функцию, которая реализует следующую математическую функцию:

$$
f(x) = \cases{
0,  \quad x < 0 \\ 
x^2,  \quad 0 \leq x \leq 1 \\
x^3,  \quad x > 1}
$$

Сохраните её в переменную `quad_cube` и выполните на векторе $\pmatrix{-5.0 & -4.9 & -4.8 & \dots -0.9 & 0.0 & 0.1 & \dots & 4.8 & 4.9 & 5.0}$.

Сохраните результат в переменную `qcres`.

```{r 14}
quad_cube <- function(x) {
  result <- numeric(length(x))
  
  for (i in 1:length(x)) {
    if (x[i] < 0) {
      result[i] <- 0 
    } else if (x[i] > 1) {
      result[i] <- x[i]^3 
    }
    else {
      result[i] <- x[i]^2
    }
  }
  
  return(result)
}
qcres <- quad_cube(seq(-5, 5, by = .1))
```

```{r 14-res, echo=TRUE}
qcres
```

Воспользуйтесь командой ниже, чтобы визуализировать вектор и сравнить результат с ожидаемым.

```{r 14-vis, echo=TRUE}
plot(qcres, type = "l")
```

:::



::: hints-wrapper
<details class="hints" id="pr2-14-hints">

<summary>Подсказка</summary>

Может быть два решения:

* для одного понадобиться

```{r 14-hint1, echo=TRUE, eval=FALSE}
for (variable in vector) {
  ...
}
```

* для другого

```{r 14-hint2, echo=TRUE, eval=FALSE}
Map(function, vector)
unlist(list)
```
</details>
:::

### #15 {#pr2-15}

<img id="pr2-15-level" class="level"/>

::: {#pr2-15-task .task}
Создадим список с результатами статистических тестов. Вот такой:

```{r 15-list, echo=TRUE}
ttests <- list(test1 = list(t = 1.33,
                            p = 0.1),
               test2 = list(t = 2.306,
                            p = 0.025),
               test3 = list(t = 3.527,
                            p = 0.001))
ttests
```

Этот список состоит из результатов неких трёх t-тестов --- `test1`, `test2`, `test3` --- которые являются его элементами. В свою очередь каждый результат также является списком и состоит из двух значений --- `t` и `p`.

Вытащите из списка `ttests` p-значения. Результатом должен быть вектор из трех значений.

```{r 15}
pvals <- numeric()
for (i in 1:length(ttests)) {
  pvals[i] <- ttests[[i]]$p
}
pvals
```

:::


::: hints-wrapper
<details class="hints" id="pr2-15-hints">

<summary>Подсказка</summary>

Надо пройтись по элементами списка и вытащить из них нужный элемент. Подойдет 

```{r 15-hint, echo=TRUE, eval=FALSE}
for (variable in vector) {
  ...
}
```

</details>
:::

### #16 {#pr2-16}

<img id="pr2-16-level" class="level"/>

::: {#pr2-16-task .task}
В [задании 8](#pr2-8) мы считали сумму по столбцам матрицы. Но что делать, если нам нужно посчитать несколько статистик по столбцам?

Напишите функцию `mat_desc(m)`, которая будет считать сумму, среднее и медиану по столбцам матрицы.

Фунция должна:

* принимать на вход матрицу произвольного размера
* возвращать матрицу с числом столбцов, равным числу столбцов входной матрицы, в которой в первой строке будут суммы, во второй --- средние, в третьей --- медианы, рассчитанные по столбцам входной матрицы
* строки матрицы должны быть подписаны `sum`, `mean` и `median` соответственно

:::

```{r 16}
mat_desc <- function(m) {
  sums <- apply(m, 2, sum)
  means <- apply(m, 2, mean)
  medians <- apply(m, 2, median)
  result <- rbind(sums, means, medians)
  rownames(result) <- c("sum", "mean", "median")
  return(result)
}
```

```{r 16-call}
mat_desc(m)
```


::: hints-wrapper

<details class="hints" id="pr2-16-hints">

<summary>Подсказки</summary>

```{r 16-hint, echo=TRUE, eval=FALSE}
apply()
rbind()
rownames()
```

</details>

:::

### #17 {#pr2-17}

<img id="pr2-17-level" class="level"/>

::: {#pr2-17-task .task}
Поведением функции мы часто хотим управлять. Допустим, мы не хотим, чтобы наша функция по умолчанию приводила отрицательный аргумент к комплексному типу данных. Мы хотим, чтобы дефолтно она работала в вещественных числах, привычных нам, а уж если нам очень понадобиться, мы сами скажем ей, чтобы она использовала всю свою комплексную мощь.

Модифицируйте функцию из предыдущего задания так, чтобы по умолчанию она возвращала `NaN`, если `x` отрицательный, но могла вычислить значение при необходимости.


:::

```{r 17}
sqrtn <- function(x, n, complex = FALSE) {
  if (x < 0 & complex) x <- as.complex(x)
  x^(1/n)
}
```

```{r 17-calls, echo=TRUE}
sqrtn(4, 2)
sqrtn(27, 3)
sqrtn(30, -5)
sqrtn(-2, 2)
sqrtn(-2, 2, complex = TRUE)
```

::: hints-wrapper
<details class="hints" id="pr2-17-hints">

<summary>Подсказка</summary>

Нужен дополнительный аргумент (в примерах он назван `complex`), который по умолчанию будет равен `FALSE`.

</details>
:::

### #18 {#pr2-18}

<img id="pr2-18-level" class="level"/>

::: {#pr2-18-task .task}
Функции, которые внутри себя содержат цикл --- это что-то сложное. Можно вынести его из функции и использовать функцию внутри цикла. Но и то, и другое выглядит громоздко и работает медленно. Есть более красивый вариант.

Ниже представлена функция из [задания 14](#pr2-14), из которой удален цикл --- теперь она может работать только с одним значением `x` (вектором, длины 1). Согласитель, читаться стало проще:

```{r 18-fun, echo=TRUE, eval=TRUE}
quad_cube2 <- function(x) {
    if (x < 0) return(0)
    else if (x > 1) return(x^3)
    else return(x^2)
}
```

C помощью функции `Map()` выполните её на векторе $\pmatrix{-5.0 & -4.9 & -4.8 & \dots -0.9 & 0.0 & 0.1 & \dots & 4.8 & 4.9 & 5.0}$.

Изучите результат. При необходимости, переведите его в вектор.

Сохраните результат в переменную `qcres2`.

```{r 18}
qcres2 <- unlist(Map(quad_cube2, seq(-5, 5, by = .1)))
```

Воспользуйтесь командой ниже, чтобы убедиться, что мы получили тот же самый результат.

```{r 18-vis, echo=TRUE}
plot(qcres2, type = "l")
```

:::



::: hints-wrapper
<details class="hints" id="pr2-18-hints">

<summary>Подсказки</summary>

```{r 18-hints, echo=TRUE, eval=FALSE}
Map(function, vector)
unlist(list)
```

</details>
:::

### #19 {#pr2-19}

<img id="pr2-19-level" class="level"/>

::: {#pr2-19-task .task}
Давайте аналогичным способом возведем каждый элемент вектора в квадрат. Возьмите вектор $\pmatrix{1 & 2 & 3 & 4 & 5}$ и возведите каждый его элемент в квадрат с помощью функции `Map()`.

Можно написать для этого функцию, но она будет очень короткая и простая и лишь займет место в скрипте. Пропишите функцию прямо в функции `Map()`.

:::

```{r 19}
unlist(Map(function(x) x^2, 1:5))
```



::: hints-wrapper

<details class="hints" id="pr2-19-hints">

<summary>Подсказка</summary>

```{r 19-hint, echo=TRUE, eval=FALSE}
Map(function(x) ..., vector)
```

</details>

:::

### #20 {#pr2-20}

<img id="pr2-20-level" class="level"/>

::: {#pr2-20-task .task}

Вытащите p-значения из списка `ttests` из [задания 15](#pr2-15) без использования цикла и создания функций. Результат должен быть вектором.

:::

```{r 20}
unlist(Map(function(x) x$p, ttests))
```

::: hints-wrapper

<details class="hints" id="pr2-15-hints">

<summary>Подсказки</summary>

```{r 20-hint1, echo=TRUE, eval=FALSE}
Map(function, list)
unlist(list)
```

```{r 20-hint2, echo=TRUE, eval=FALSE}
Map(function(x) ..., list)
```

</details>

:::



## Дополнительные задания {#pr2_add}

### #1 {#pr2-21}

<img id="pr2-21-level" class="level"/>

::: {#pr2-21-task .task}
Сгенерируйте 5 [независимых] выборок по 30 наблюдений из генеральной совокупности с нормальным распределением `rnorm(..., mean = 10, sd = 20)`. Результат генерации должен быть представлен в виде матрицы 30×5, где каждый столбец --- это одна выборка. Сохраните результат генерации в переменной `sim`.

Пример сгенерирован при `set.seed(24)`.

:::

```{r 21}
set.seed(24)
sim <- matrix(rnorm(30*5, mean = 10, sd = 20),
              nrow = 30)
sim
```


### #2 {#pr2-22}

<img id="pr2-22-level" class="level"/>

::: {#pr2-22-task .task}

Посчитайте среднее (`mean()`) и стандартное отклонение (`sd()`) по каждой сгенерированной выборке.

:::

```{r 22}
apply(sim, 2, mean)
apply(sim, 2, sd)
```


### #3 {#pr2-23}

<img id="pr2-23-level" class="level"/>

::: {#pr2-23-task .task}
Текст задания.
:::


::: hints-wrapper
<details class="hints" id="pr2-23-hints">

<summary>Подсказки</summary>

<details class="hint">

<summary>Как делать задание?</summary>

</details>

<details class="hint">

<summary>Что надо сделать?</summary>

</details>

<details class="hint">

<summary>Ответ неверный</summary>

</details>

</details>
:::

### #4 {#pr2-24}

<img id="pr2-24-level" class="level"/>

::: {#pr2-24-task .task}
Текст задания.
:::


### #5 {#pr2-25}

<img id="pr2-25-level" class="level"/>

::: {#pr2-25-task .task}
Текст задания.
:::


::: hints-wrapper
<details class="hints" id="pr2-25-hints">

<summary>Подсказки</summary>

<details class="hint">

<summary>Как делать задание?</summary>

</details>

<details class="hint">

<summary>Что надо сделать?</summary>

</details>

<details class="hint">

<summary>Ответ неверный</summary>

</details>

</details>
:::

### #6 {#pr2-26}

<img id="pr2-26-level" class="level"/>


::: hints-wrapper
<details class="hints" id="pr2-26-hints">

<summary>Подсказки</summary>

<details class="hint">

<summary>Как делать задание?</summary>

</details>

<details class="hint">

<summary>Что надо сделать?</summary>

</details>

<details class="hint">

<summary>Ответ неверный</summary>

</details>

</details>
:::

### #7 {#pr2-27}

<img id="pr2-27-level" class="level"/>

::: {#pr2-27-task .task}
Текст задания.
:::


::: hints-wrapper
<details class="hints" id="pr2-27-hints">

<summary>Подсказки</summary>

<details class="hint">

<summary>Как делать задание?</summary>

</details>

<details class="hint">

<summary>Что надо сделать?</summary>

</details>

<details class="hint">

<summary>Ответ неверный</summary>

</details>

</details>
:::

### #8 {#pr2-28}

<img id="pr2-28-level" class="level"/>

::: {#pr2-28-task .task}
Текст задания.
:::


::: hints-wrapper
<details class="hints" id="pr2-28-hints">

<summary>Подсказки</summary>

<details class="hint">

<summary>Как делать задание?</summary>

</details>

<details class="hint">

<summary>Что надо сделать?</summary>

</details>

<details class="hint">

<summary>Ответ неверный</summary>

</details>

</details>
:::

### #9 {#pr2-29}

<img id="pr2-29-level" class="level"/>

::: {#pr2-29-task .task}
Текст задания.
:::


::: hints-wrapper
<details class="hints" id="pr2-29-hints">

<summary>Подсказки</summary>

<details class="hint">

<summary>Как делать задание?</summary>

</details>

<details class="hint">

<summary>Что надо сделать?</summary>

</details>

<details class="hint">

<summary>Ответ неверный</summary>

</details>

</details>
:::

### #10 {#pr2-30}

<img id="pr2-30-level" class="level"/>

::: {#pr2-30-task .task}
Текст задания.
:::


::: hints-wrapper
<details class="hints" id="pr2-30-hints">

<summary>Подсказки</summary>

<details class="hint">

<summary>Как делать задание?</summary>

</details>

<details class="hint">

<summary>Что надо сделать?</summary>

</details>

<details class="hint">

<summary>Ответ неверный</summary>

</details>

</details>
:::

***

Некоторые задания, а также форматы заданий, подсмотрены у @moroz-dh4dl и @grinberg-rexercises.

<!-- *** -->

```{=html}
<!--- CHANGE pr2 TO pr<n> IN THE LINES BELOW--->
<script type="text/javascript" src="./js/pr2.json"></script>
<script type="text/javascript" src="./js/pr.js"></script>
```
